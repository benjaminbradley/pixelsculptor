{"version":3,"sources":["contexts/ConfigContext.js","palettes.js","components/BinaryTreeArtPixel.js","components/Config.js","App.js","reportWebVitals.js","index.js"],"names":["ConfigContext","createContext","ACTIONS","SETTINGS","initialState","configReducer","state","action","type","key","value","ConfigProvider","props","useReducer","configData","config","dispatch","Provider","useConfigContext","useContext","PALETTES","a","b","c","d","e","f","g","h","i","j","bw","BinaryTreeArtPixel","depth","orientation","useState","split","setSplit","classNames","push","bg","curPaletteName","Object","keys","includes","curPalette","length","className","join","data-depth","style","backgroundColor","onClick","Config","doSculpt","myUpdateConfig","k","v","document","documentElement","setProperty","console","log","id","htmlFor","onChange","target","name","checked","entries","map","palette_name","palette_colors","App","VIEWS","currentView","setCurrentView","rel","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.38e28ced.chunk.js","sourcesContent":["import { createContext, useReducer, useContext } from 'react';\n\nexport const ConfigContext = createContext();\n\nexport const ACTIONS = {\n  UPDATE:1\n};\n\nexport const SETTINGS = {\n  PALETTE_NAME: 'p',\n  DEFAULT_COLOR: 'd'\n};\n\n// Initial state\nconst initialState = {\n  [SETTINGS.PALETTE_NAME]: 'none',\n  [SETTINGS.DEFAULT_COLOR]: '#ddd'\n};\n\n// Action creators\nexport function updateConfig(key, value) {\n  return { type: ACTIONS.UPDATE, key, value };\n}\n\n// Reducer\nexport const configReducer = (state, action) => {\n  switch (action.type) {\n    case ACTIONS.UPDATE:\n      return { ...state, [action.key]: action.value };\n    default:\n      return state;\n  }\n}\n\nfunction ConfigProvider(props) {\n  const [config, dispatch] = useReducer(configReducer, initialState);\n  const configData = { config, dispatch };\n  return <ConfigContext.Provider value={configData} {...props} />;\n}\n\nfunction useConfigContext() {\n  return useContext(ConfigContext);\n}\n\nexport { ConfigProvider, useConfigContext };\n","const PALETTES = {\n  a: ['#b2b2b2', '#50394c', '#f4e1d2', '#ffef96'],\n  b: ['#80ced6', '#d5f4e6', '#fefbd8', '#618685'],\n  c: ['#034f84', '#92a8d1', '#f7cac9', '#f7786b'],\n  d: ['#4040a1', '#36486b', '#618685', '#fefbd8'],\n  e: ['#6b5b95', '#878f99', '#a2b9bc', '#b2ad7f'],\n  f: ['#622569', '#b8a9c9', '#d6d4e0', '#5b9aa0'],\n  g: ['#c83349', '#e06377', '#eeac99', '#f9d5e5'],\n  h: ['#ff7b25', '#d64161', '#6b5b95', '#feb236'],\n  i: ['#d96459', '#f2ae72', '#588c7e', '#f2e394'],\n  j: ['#b2ad7f', '#878f99', '#a2b9bc', '#6b5b95'],\n  bw: ['#fff', '#000']\n};\nexport default PALETTES;\n","import { useState } from 'react';\nimport { useConfigContext, SETTINGS } from '../contexts/ConfigContext';\nimport PALETTES from '../palettes';\n\nfunction BinaryTreeArtPixel({\n  depth,\n  orientation\n}) {\n  const { config } = useConfigContext();\n  const [ split, setSplit ] = useState(false);\n  const classNames=['btap', orientation];\n  if (depth === 0) classNames.push('base');\n\n  let bg=null;\n  const curPaletteName = config[SETTINGS.PALETTE_NAME];\n  if (curPaletteName && Object.keys(PALETTES).includes(curPaletteName)) {\n    const curPalette = PALETTES[curPaletteName];\n    const palIdx = depth % curPalette.length;\n    bg=curPalette[palIdx];\n  }\n\n  return (!split ?\n    <div className={classNames.join(' ')}\n      onClick={() => setSplit(true)}\n      data-depth={depth}\n      style={bg ? {backgroundColor: bg} : null}\n    />\n  :\n    <div className={classNames.join(' ')}\n      data-depth={depth}\n      style={bg ? {backgroundColor: bg} : null}\n    >\n        <BinaryTreeArtPixel\n          depth={depth+1}\n          orientation={orientation === 'h' ? 'v' : 'h'}\n        />\n        <BinaryTreeArtPixel\n          depth={depth+1}\n          orientation={orientation === 'h' ? 'v' : 'h'}\n        />\n    </div>\n  );\n}\n\nexport default BinaryTreeArtPixel;\n","import { useConfigContext, updateConfig, SETTINGS } from '../contexts/ConfigContext';\nimport PALETTES from '../palettes';\n\nfunction Config({doSculpt}) {\n  const { config, dispatch } = useConfigContext();\n  function myUpdateConfig(k,v) {\n    // store value in context\n    dispatch(updateConfig(k,v));\n    // update CSS\n    switch(k) {\n      case SETTINGS.DEFAULT_COLOR:\n        document.documentElement.style.setProperty('--default-color', v);\n        break;\n      case SETTINGS.PALETTE_NAME:\n        break;\n      default:\n        console.log(`Unknown settings key: '${k}'`);\n    }\n  }\n  function getValue(key) {\n    if (Object.keys(config).includes(key)) return config[key];\n    return '';\n  }\n  return (\n    <div>\n      <h1>Make it yours</h1>\n      <div id='settings'>\n        <div className='setting'>\n            <label htmlFor='default-color'>Default color:</label>\n            <input id='default-color' type='text' value={getValue(SETTINGS.DEFAULT_COLOR)} onChange={(e) => myUpdateConfig(SETTINGS.DEFAULT_COLOR, e.target.value)}/>\n            <div id='default-color-sample' className='colorsample'/>\n            <br/><span className='help'>Can be any valid HTML color name, or a code in #rgb or #rrggbb format.</span>\n        </div>\n        <div className='setting'>\n            <label>Palette:</label>\n            <div id='palette-options' onChange={(e) => myUpdateConfig(SETTINGS.PALETTE_NAME, e.target.value)}>\n              <div>\n                <input type='radio' name='palette' value={'none'} id={`palette_none`}\n                  checked={config[SETTINGS.PALETTE_NAME] === 'none'}\n                />\n                <label htmlFor={`palette_none`}>None (use default color)</label>\n              </div>\n              {Object.entries(PALETTES).map(([palette_name, palette_colors]) => (\n                <div>\n                  <input type='radio' name='palette' value={palette_name} id={`palette_${palette_name}`}\n                    checked={config[SETTINGS.PALETTE_NAME] === palette_name}\n                  />\n                  <label htmlFor={`palette_${palette_name}`}>\n                    {palette_colors.map(c => (\n                      <div className='colorsample' style={{backgroundColor: c}}/>\n                    ))}\n                  </label>\n                </div>\n              ))}\n            </div>\n            <span className='help'>Palette colors will cycle and repeat with depth.</span>\n        </div>\n        <button onClick={doSculpt}>{`Let's Sculpt!`}</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Config;\n","import { useState } from 'react';\nimport './App.css';\nimport BinaryTreeArtPixel from './components/BinaryTreeArtPixel.js';\nimport { ConfigProvider } from './contexts/ConfigContext';\nimport Config from './components/Config.js';\n\nfunction App() {\n  const VIEWS={\n    CONFIG:3,\n    MENU:2,\n    SCULPT:1\n  };\n  const [currentView, setCurrentView] = useState(VIEWS.CONFIG);\n  function doMEnu() {\n    setCurrentView(VIEWS.MENU);\n  }\n  function doConfig() {\n    setCurrentView(VIEWS.CONFIG);\n  }\n  function doSculpt() {\n    setCurrentView(VIEWS.SCULPT);\n  }\n  return (\n    <div className=\"App\">\n      <ConfigProvider>\n        {currentView === VIEWS.MENU ?\n          <div id=\"main-menu\">\n            <h1>Le Menu</h1>\n            <button onClick={doSculpt}>Sculpt!</button>\n            <button onClick={doConfig}>\n              Configure<br/>\n              (Set your palette, etc.)\n            </button>\n            <a target=\"_blank\" rel=\"noreferrer\" className='button' href=\"https://github.com/benjaminbradley/pixelsculptor#readme\">About</a>\n          </div>\n        :\n          <div>\n            <button id='goToMenu' onClick={doMEnu}>Menu</button>\n            {currentView === VIEWS.CONFIG?\n              <Config\n                doSculpt={doSculpt}\n              />\n            :\n              <BinaryTreeArtPixel\n                depth={0}\n                orientation={'v'}\n              />\n            }\n          </div>\n        }\n      </ConfigProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}