{"version":3,"sources":["contexts/ConfigContext.js","lib/paletteTools.js","components/BinaryTreeArtPixel.js","assets/ftadd.svg","assets/ftedit-remove.svg","assets/ftpencil.svg","assets/ftinscol.svg","assets/ftbrackets.svg","components/CustomPalette.js","components/Config.js","lib/binaryTools.js","App.js","reportWebVitals.js","index.js"],"names":["SETTINGS","CUSTOM_PALETTE","SCULPT_PATH","PALETTE_TYPE","PALETTE_NAME","DEFAULT_COLOR","PALETTE_TYPES","GRADIENT","CYCLE","MONOCHROME","initialState","ConfigContext","createContext","ACTIONS","parseUrl","window","location","hash","length","params","substring","split","forEach","pair","key","value","decodeURIComponent","updateUrl","setting_key","raw_value","newHash","Object","entries","map","encodeURIComponent","join","updateConfig","type","configReducer","state","action","ConfigProvider","props","useReducer","configData","config","dispatch","Provider","useConfigContext","useContext","PALETTES","custom","a","b","c","d","e","f","g","h","i","j","bw","GRADIENTS","0","15","6","5","10","gs","encodeCustomPalette","colorSet","colorCode","gradientDef","colorSetToGradientDef","k","v","console","log","decodeCustomPalette","customPaletteString","cc","gradEntry","index","color","memo_cache","colorToRGBA","canvas","document","createElement","width","height","ctx","getContext","factory","call","memoize","col","clearRect","fillStyle","computed","fillRect","getImageData","data","getBetween","init","final","percent","getGradientEntries","gradient_points","sortedDepthPoints","keys","parseInt","sort","minIdx","maxIdx","gradColors","minDepth","maxDepth","initialColor","finalColor","colorPoint","Math","round","concat","toString","padStart","BinaryTreeArtPixel","loadSculptPath","onUpdate","depth","orientation","useState","setSplit","c1LoadSculptPath","setC1LoadSculptPath","c2LoadSculptPath","setC2LoadSculptPath","LOADSTATE","loadState","useRef","useEffect","prototype","current","dfsp","c1","c2","updateDfsp","classNames","push","bg","curPalette","curPaletteName","includes","curGradient","gradPaletteName","getColor","className","data-depth","style","backgroundColor","bitstream","onClick","CustomPalette","setColorSet","curGradientEntries","setGradientEntries","showCustomPaletteEditor","setShowCustomPaletteEditor","colorPickerIsVisible","setColorPickerIsVisible","pickerColor","setPickerColor","pickerIndex","updateColor","newCode","newEntry","replace","title","src","editIcon","alt","closeIcon","onChange","target","placeholder","splice","addEntryAt","insertIcon","delEntryAt","delIcon","addIcon","newColor","Config","doSculpt","myUpdateConfig","documentElement","setProperty","newCustomPalette","GRADIENT_NAME","id","label","name","checked","htmlFor","palette_name","palette_colors","gradient_name","parseBitStream","sculptPath","cellCount","thisBit","shift","childPath","App","configDispatch","VIEWS","currentView","setCurrentView","loadedSculptPath","setLoadedSculptPath","values","base64","binaryData","atob","bitArray","byte","slice","byteInt","charCodeAt","bit","pop","base64toBitArray","performance","memory","rel","href","setTimeout","eightbits","String","fromCharCode","btoa","bitArrayToBase64","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9432d8c8.chunk.js","sourcesContent":["import { createContext, useReducer, useContext } from 'react';\n\nexport const SETTINGS = {\n  CUSTOM_PALETTE: 'cp',\n  SCULPT_PATH: 's',\n  PALETTE_TYPE: 'pt',\n  PALETTE_NAME: 'p',\n  DEFAULT_COLOR: 'd'\n};\n\nexport const PALETTE_TYPES = {\n  GRADIENT: 'g',\n  CYCLE: 'c',\n  MONOCHROME: 'm'\n};\n\n// Initial state\nconst initialState = {\n  [SETTINGS.PALETTE_TYPE]: PALETTE_TYPES.GRADIENT,\n  [SETTINGS.PALETTE_NAME]: 'gs',\n  [SETTINGS.DEFAULT_COLOR]: '#ddd'\n};\n\nexport const ConfigContext = createContext();\n\nexport const ACTIONS = {\n  UPDATE:1\n};\n\nexport function parseUrl() {\n  if (window.location.hash.length === 0) return {};\n  const params={};\n  window.location.hash.substring(1).split('&').forEach(pair => {\n    const [key, value] = pair.split('=');\n    if (value.length)\n      params[key] = decodeURIComponent(value);\n  });\n  return params;\n}\n\nexport function updateUrl(setting_key, raw_value) {\n  const params = parseUrl();\n  params[setting_key] = raw_value;\n  const newHash = Object.entries(params).map(\n    ([key,value]) => `${key}=${encodeURIComponent(value)}`\n  ).join('&');\n  window.location.hash = newHash;\n}\n\n// Action creators\nexport function updateConfig(key, value) {\n  return { type: ACTIONS.UPDATE, key, value };\n}\n\n// Reducer\nexport const configReducer = (state, action) => {\n  switch (action.type) {\n    case ACTIONS.UPDATE:\n      return { ...state, [action.key]: action.value };\n    default:\n      return state;\n  }\n}\n\nfunction ConfigProvider(props) {\n  const [config, dispatch] = useReducer(configReducer, initialState);\n  const configData = { config, dispatch };\n  return <ConfigContext.Provider value={configData} {...props} />;\n}\n\nfunction useConfigContext() {\n  return useContext(ConfigContext);\n}\n\nexport { ConfigProvider, useConfigContext };\n","import { SETTINGS, PALETTE_TYPES } from '../contexts/ConfigContext';\n\nexport const PALETTES = {\n  custom: [],\n  a: ['#b2b2b2', '#50394c', '#f4e1d2', '#ffef96'],\n  b: ['#80ced6', '#d5f4e6', '#fefbd8', '#618685'],\n  c: ['#034f84', '#92a8d1', '#f7cac9', '#f7786b'],\n  d: ['#4040a1', '#36486b', '#618685', '#fefbd8'],\n  e: ['#6b5b95', '#878f99', '#a2b9bc', '#b2ad7f'],\n  f: ['#622569', '#b8a9c9', '#d6d4e0', '#5b9aa0'],\n  g: ['#c83349', '#e06377', '#eeac99', '#f9d5e5'],\n  h: ['#ff7b25', '#d64161', '#6b5b95', '#feb236'],\n  i: ['#d96459', '#f2ae72', '#588c7e', '#f2e394'],\n  j: ['#b2ad7f', '#878f99', '#a2b9bc', '#6b5b95'],\n  bw: ['#fff', '#000']\n};\n\nexport const GRADIENTS = {\n  custom: {},\n  a: {\n    0: '#fefbd8',\n    15: '#4040a1'\n  },\n  b: {\n    0: '#f9d5e5',\n    15: '#c83349'\n  },\n  c: {\n    0: '#80ced6',\n    6: '#622569',\n    15: '#000'\n  },\n  d: {\n    0: '#f00',\n    5: '#0f0',\n    10: '#00f',\n    15: '#f00'\n  },\n  e: {\n    0: '#0f0',\n    5: '#00f',\n    10: '#f00',\n    15: '#0f0'\n  },\n  f: {\n    0: '#00f',\n    5: '#f00',\n    10: '#0f0',\n    15: '#00f'\n  },\n  gs: {\n    0: '#fff',\n    15: '#000'\n  }\n}\n\n// serialize a colorSet to string\nexport function encodeCustomPalette(colorSet, type) {\n  if (type === PALETTE_TYPES.CYCLE) {\n    return colorSet.map(e => e.colorCode).join(',')\n  } else if (type === PALETTE_TYPES.GRADIENT) {\n    const gradientDef = colorSetToGradientDef(colorSet);\n    return Object.entries(gradientDef).map(([k,v]) => `${k}:${v}`).join(',')\n  }\n  console.log(`ERROR: Unknown CustomPalette type: '${type}'`);\n  return null;\n}\n\n// deserialize a string to colorSet structure\nexport function decodeCustomPalette(customPaletteString, type) {\n  if (!customPaletteString) return [];\n  if (type === PALETTE_TYPES.CYCLE) {\n    return customPaletteString.split(',').map(cc => ({colorCode: cc}));\n  } else if (type === PALETTE_TYPES.GRADIENT) {\n    const colorSet = [];\n    customPaletteString.split(',').forEach(gradEntry => {\n      const [ index, color ] = gradEntry.split(':');\n      colorSet[index] = {colorCode: color};\n    });\n    // fill empty entries\n    for (let i=0; i<colorSet.length; i++) {\n      if (!colorSet[i]) colorSet[i] = {colorCode:''};\n    }\n    return colorSet;\n  }\n  console.log(`ERROR: Unknown CustomPalette type: '${type}'`);\n  return null;\n}\n\nexport function colorSetToGradientDef(colorSet) {\n  // convert colorSet (array of objects w/ colorCode attribute) to gradientDef (object w/ depth indices/colorCode values)\n  const gradientDef = {};\n  for (let i=0; i<colorSet.length; i++) {\n    if (colorSet[i] && 'colorCode' in colorSet[i] && colorSet[i].colorCode) {\n      gradientDef[i] = colorSet[i].colorCode;\n    }\n  }\n  return gradientDef;\n}\n\n//TODO: memoize\nexport function getColor(config, depth) {\n  switch (config[SETTINGS.PALETTE_TYPE]) {\n    case PALETTE_TYPES.MONOCHROME:\n      return config[SETTINGS.DEFAULT_COLOR];\n    case PALETTE_TYPES.CYCLE:\n      const curPaletteName = config[SETTINGS.PALETTE_NAME];\n      let curPalette;\n      if (curPaletteName === 'custom') {\n        const customPalette = decodeCustomPalette(config[SETTINGS.CUSTOM_PALETTE], PALETTE_TYPES.CYCLE);\n        curPalette = customPalette.map(e => e.colorCode);\n      } else if (curPaletteName && Object.keys(PALETTES).includes(curPaletteName)) {\n        curPalette = PALETTES[curPaletteName];\n      } else {\n        console.log(`ERROR: Unknown Cycle Palette name '${curPaletteName}'`)\n        return null;\n      }\n      const palIdx = depth % curPalette.length;\n      return curPalette[palIdx];\n      // eslint-disable-next-line no-fallthrough\n    case PALETTE_TYPES.GRADIENT:\n      const gradPaletteName = config[SETTINGS.PALETTE_NAME];\n      let curGradient;\n      if (gradPaletteName === 'custom') {\n        const colorSet = decodeCustomPalette(config[SETTINGS.CUSTOM_PALETTE], PALETTE_TYPES.GRADIENT);\n        curGradient = colorSetToGradientDef(colorSet);\n      } else if (gradPaletteName && Object.keys(GRADIENTS).includes(gradPaletteName)) {\n        curGradient = GRADIENTS[gradPaletteName];\n      } else {\n        console.log(`ERROR: Unknown Gradient Palette name '${gradPaletteName}'`)\n        return null;\n      }\n      const gradColors = getGradientEntries(curGradient);\n      if (Object.keys(gradColors).map(i=>parseInt(i)).includes(depth)) return gradColors[depth];\n      return config[SETTINGS.DEFAULT_COLOR];\n      // eslint-disable-next-line no-fallthrough\n    default:\n      return null;\n  }\n}\n\n\n// Thanks, Alnitak! https://stackoverflow.com/questions/11068240/what-is-the-most-efficient-way-to-parse-a-css-color-in-javascript\nconst memo_cache={};\nfunction memoize(factory, ctx) {\n  return function(key) {\n    if (!(key in memo_cache)) {\n      memo_cache[key] = factory.call(ctx, key);\n    }\n    return memo_cache[key];\n  };\n};\n\nconst colorToRGBA = (function() {\n  var canvas = document.createElement('canvas');\n  canvas.width = canvas.height = 1;\n  var ctx = canvas.getContext('2d');\n\n  return memoize(function(col) {\n      ctx.clearRect(0, 0, 1, 1);\n      ctx.fillStyle = '#000';\n      ctx.fillStyle = col;\n      var computed = ctx.fillStyle;\n      ctx.fillStyle = '#fff';\n      ctx.fillStyle = col;\n      if (computed !== ctx.fillStyle) {\n          return null; // invalid color\n      }\n      ctx.fillRect(0, 0, 1, 1);\n      return [ ...ctx.getImageData(0, 0, 1, 1).data ];\n  });\n})();\n\nfunction getBetween(init, final, percent) {\n  if (init < final) {\n    return (final-init) * percent + init;\n  } else {\n    return init - (init-final) * percent;\n  }\n}\n\n//TODO: memoize\nexport function getGradientEntries(gradient_points) {\n  const sortedDepthPoints = Object.keys(gradient_points).map(i=>parseInt(i))\n  .sort((a,b) => { return (a < b ? -1 : (a === b ? 0 : 1))});\n  let minIdx = 0;\n  let maxIdx = 1;\n  const gradColors = {};\n  while (maxIdx < sortedDepthPoints.length) {\n    let minDepth = sortedDepthPoints[minIdx];\n    let maxDepth = sortedDepthPoints[maxIdx];\n    let initialColor = colorToRGBA(gradient_points[minDepth]);\n    if (!initialColor) initialColor = [0,0,0];  // use a default for invalid values\n    let finalColor = colorToRGBA(gradient_points[maxDepth]);\n    if (!finalColor) finalColor = [0,0,0];  // use a default for invalid values\n    for (let i=minDepth; i<=maxDepth; i++) {\n      const percent = (i-minDepth)/(maxDepth-minDepth);\n      const colorPoint = [];\n      for (let j=0; j<3; j++) {\n        colorPoint[j] = Math.round(getBetween(initialColor[j], finalColor[j], percent));\n      }\n      const c = '#'.concat(\n        colorPoint[0].toString(16).padStart(2, '0'),\n        colorPoint[1].toString(16).padStart(2, '0'),\n        colorPoint[2].toString(16).padStart(2, '0')\n      );\n      gradColors[i] = c;\n    }\n    minIdx++;\n    maxIdx++;\n  }\n  return gradColors;\n}\n","import { useState, useEffect, useRef } from 'react';\nimport { useConfigContext } from '../contexts/ConfigContext';\nimport { getColor } from '../lib/paletteTools';\n\nfunction BinaryTreeArtPixel({\n  loadSculptPath,\n  onUpdate,\n  depth,\n  orientation\n}) {\n  const { config } = useConfigContext();\n  const [ split, setSplit ] = useState(false);\n  const [c1LoadSculptPath, setC1LoadSculptPath] = useState(null);\n  const [c2LoadSculptPath, setC2LoadSculptPath] = useState(null);\n  const LOADSTATE = {NA:0, LOADING:1, DONE:2};\n  const loadState = useRef(LOADSTATE.NA);\n\n  useEffect(() => {\n    if (loadSculptPath === -1 && split) {\n      // propagate reset action\n      setC1LoadSculptPath(-1);\n      setC2LoadSculptPath(-1);\n      setSplit(false);\n    }\n    if (Object.prototype.toString.call( loadSculptPath ) === '[object Array]' && loadState.current === LOADSTATE.NA) {\n      // propagate load action\n      loadState.current = LOADSTATE.LOADING;\n      setSplit(true);\n      if (loadSculptPath.length > 0) {\n        setC1LoadSculptPath(loadSculptPath[0]);\n        if (loadSculptPath.length > 1)\n          setC2LoadSculptPath(loadSculptPath[1]);\n      }\n      loadState.current = LOADSTATE.DONE;\n    }\n  }, [loadSculptPath]);\n  const dfsp = useRef([0]);\n  const c1 = useRef([]);\n  const c2 = useRef([]);\n  function updateDfsp() {\n    if (split) {\n      dfsp.current = [1].concat(c1.current, c2.current);\n    } else {\n      dfsp.current = [0];\n    }\n    // if loading, don't propagate upwards\n    if (Object.prototype.toString.call( loadSculptPath ) === '[object Array]' && loadState.current === LOADSTATE.LOADING) return;\n    onUpdate(dfsp.current);\n  }\n  useEffect(() => {\n    updateDfsp();\n  }, [split, c1, c2, onUpdate]);\n  function updateC1(bitstream) {\n    c1.current = bitstream;\n    updateDfsp();\n  }\n  function updateC2(bitstream) {\n    c2.current = bitstream;\n    updateDfsp();\n  }\n\n  const classNames=['btap', orientation];\n  if (depth === 0) classNames.push('base');\n\n  const bg = getColor(config, depth);\n\n  return (!split ?\n    <div className={classNames.join(' ')}\n      onClick={() => setSplit(true)}\n      data-depth={depth}\n      style={bg ? {backgroundColor: bg} : null}\n    />\n  :\n    <div className={classNames.join(' ')}\n      data-depth={depth}\n      style={bg ? {backgroundColor: bg} : null}\n    >\n        <BinaryTreeArtPixel\n          depth={depth+1}\n          orientation={orientation === 'h' ? 'v' : 'h'}\n          onUpdate={updateC1}\n          loadSculptPath={c1LoadSculptPath}\n        />\n        <BinaryTreeArtPixel\n          depth={depth+1}\n          orientation={orientation === 'h' ? 'v' : 'h'}\n          onUpdate={updateC2}\n          loadSculptPath={c2LoadSculptPath}\n        />\n    </div>\n  );\n}\n\nexport default BinaryTreeArtPixel;\n","export default __webpack_public_path__ + \"static/media/ftadd.17ed1b53.svg\";","export default __webpack_public_path__ + \"static/media/ftedit-remove.6b6c8a76.svg\";","export default __webpack_public_path__ + \"static/media/ftpencil.8ab7c672.svg\";","export default __webpack_public_path__ + \"static/media/ftinscol.0fd71b40.svg\";","export default __webpack_public_path__ + \"static/media/ftbrackets.2ca1db48.svg\";","import { useState, useEffect, useRef } from 'react';\nimport { HexColorPicker } from 'react-colorful';\nimport { useConfigContext, SETTINGS, PALETTE_TYPES, updateConfig, updateUrl } from '../contexts/ConfigContext';\nimport { encodeCustomPalette, decodeCustomPalette, getGradientEntries, colorSetToGradientDef } from '../lib/paletteTools';\nimport addIcon from '../assets/ftadd.svg';\nimport delIcon from '../assets/ftedit-remove.svg';\nimport editIcon from '../assets/ftpencil.svg';\nimport insertIcon from '../assets/ftinscol.svg';\nimport closeIcon from '../assets/ftbrackets.svg';\n\nfunction CustomPalette({\n  type\n}) {\n  const { config, dispatch } = useConfigContext();\n  const [ colorSet, setColorSet ] = useState(\n    decodeCustomPalette('', type)\n  );\n  const [ curGradientEntries, setGradientEntries ] = useState({});\n  const [ showCustomPaletteEditor, setShowCustomPaletteEditor ] = useState(false);\n  const [ colorPickerIsVisible, setColorPickerIsVisible ] = useState(false);\n  const [ pickerColor, setPickerColor ] = useState('');\n  const pickerIndex = useRef();\n\n  // Load custom palette from config when it changes externally\n  useEffect(() => {\n    setColorSet(decodeCustomPalette(config[SETTINGS.CUSTOM_PALETTE], type));\n  }, [config, type]);\n\n  // When colorSet changes, update ConfigContext and URL\n  useEffect(() => {\n    const customPaletteString = encodeCustomPalette(colorSet, type);\n    if (!customPaletteString) return;\n    if (type === PALETTE_TYPES.GRADIENT) {\n      const gradientDef = colorSetToGradientDef(colorSet)\n      setGradientEntries(getGradientEntries(gradientDef));\n    }\n    if (customPaletteString === config[SETTINGS.CUSTOM_PALETTE]) return; // no change\n    // store value in context\n    dispatch(updateConfig(SETTINGS.CUSTOM_PALETTE, customPaletteString));\n    updateUrl(SETTINGS.CUSTOM_PALETTE, customPaletteString);\n  }, [colorSet, type, dispatch, config]);\n\n  function updateColor(i, newCode) {\n    colorSet[i].colorCode = newCode;\n    setColorSet([...colorSet]);\n  }\n\n  const newEntry = {colorCode:''};\n\n  function addEntryToEnd() {\n    colorSet.push(newEntry);\n    setColorSet([...colorSet]);\n  }\n\n  function addEntryAt(i) {\n    colorSet.splice(i, 0, newEntry);\n    setColorSet([...colorSet]);\n  }\n\n  function delEntryAt(i) {\n    colorSet.splice(i, 1);\n    setColorSet([...colorSet]);\n  }\n\n  function getGradColor(depth) {\n    if (depth in curGradientEntries) return curGradientEntries[depth];\n    return null;\n  }\n\n  function showColorPicker(initialColor, index) {\n    setPickerColor(initialColor);\n    pickerIndex.current = index;\n    setColorPickerIsVisible(true);\n  }\n\n  function pickerReturn(newColor) {\n    setColorPickerIsVisible(false);\n    updateColor(pickerIndex.current, newColor);\n  }\n\n  return (\n    <div className='customPalette'>\n      {type === PALETTE_TYPES.GRADIENT &&\n        Object.entries(curGradientEntries).map(([d,c]) => (\n          <div className='colorsample gradient' style={{backgroundColor: c}} key={`palette_gradient_CUSTOM_${d}_${c.replace(/[^0-9a-zA-Z]/, '')}`}/>\n        ))\n      }\n      {type === PALETTE_TYPES.CYCLE &&\n        colorSet.map((c,i) => (\n          <div className='colorsample' style={{backgroundColor: c.colorCode}} key={`palette_cycle_CUSTOM_${i}`}/>\n        ))\n      }\n      <span>custom</span>\n      <button onClick={() => setShowCustomPaletteEditor(true)} className=\"edit\" title=\"Edit custom palette\"><img src={editIcon} alt=\"Edit custom palette\"/></button>\n      {showCustomPaletteEditor &&\n        <div>\n          <div className='custom-palette-creator-backdrop'></div>\n          <div className='custom-palette-creator-container'>\n            <div className='custom-palette-creator'>\n              <button className='close' onClick={() => setShowCustomPaletteEditor(false)} title=\"Close custom palette editor\"><img src={closeIcon} alt=\"Close custom palette editor\"/></button>\n              <h2>Custom Palette Editor</h2>\n              <div className='palette-entries'>\n                {colorSet.map((e,i) =>\n                  <div className='palette-entry' key={`custpalcr_idx_${i}`}>\n                    <div className='pe-row'>\n                      {i}\n                      <div className='colorsample' style={{backgroundColor: (e.colorCode ? e.colorCode : getGradColor(i))}} />\n                    </div>\n                    <div className='pe-row'>\n                      <input type='text' value={e.colorCode} onChange={(e) => updateColor(i, e.target.value)} placeholder=\"#RRGGBB\"\n                        title=\"Enter an HTML color name or code in #RGB or #RRGGBB hexadecimal format\"\n                      />\n                    </div>\n                    <div className='pe-row'>\n                      <button onClick={() => addEntryAt(i)} className=\"add-before\" title=\"Add palette entry before this one\"><img src={insertIcon} alt=\"Add palette entry before this\"/></button>\n                      <button onClick={() => delEntryAt(i)} className=\"remove\" title=\"Remove this palette entry\"><img src={delIcon} alt=\"Remove this palette entry\"/></button>\n                      <button onClick={() => showColorPicker(e.colorCode, i)} className=\"edit\" title=\"Open color picker\"><img src={editIcon} alt=\"Open color picker\"/></button>\n                    </div>\n                  </div>\n                )}\n                <div className='palette-entry'>\n                  <button onClick={addEntryToEnd} className=\"add-entry\" title=\"Add palette entry\"><img src={addIcon} alt=\"Add palette entry to end\"/></button>\n                  {!colorSet.length &&\n                    <span> &lArr; click to add to the palette</span>\n                  }\n                </div>\n              </div>\n              {colorPickerIsVisible &&\n                <HexColorPicker color={pickerColor} onChange={pickerReturn} />\n              }\n            </div>\n          </div>\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default CustomPalette;\n","import { useConfigContext, updateConfig, SETTINGS, updateUrl, PALETTE_TYPES } from '../contexts/ConfigContext';\nimport CustomPalette from './CustomPalette';\nimport { PALETTES, GRADIENTS, getGradientEntries, decodeCustomPalette, encodeCustomPalette } from '../lib/paletteTools';\n\nfunction Config({doSculpt}) {\n  const { config, dispatch } = useConfigContext();\n\n  function myUpdateConfig(k,v) {\n    // side effects: update CSS, etc.\n    switch(k) {\n      case SETTINGS.DEFAULT_COLOR:\n        document.documentElement.style.setProperty('--default-color', v);\n        break;\n      case SETTINGS.PALETTE_TYPE:\n        // if custom palette is non-blank, and switching between cycle/gradient, convert the format\n        if ( config[SETTINGS.CUSTOM_PALETTE]\n          && [PALETTE_TYPES.CYCLE, PALETTE_TYPES.GRADIENT].includes(config[SETTINGS.PALETTE_TYPE])\n          && [PALETTE_TYPES.CYCLE, PALETTE_TYPES.GRADIENT].includes(v)\n          && config[SETTINGS.PALETTE_TYPE] !== v\n        ) {\n          const oldColorSet = decodeCustomPalette(config[SETTINGS.CUSTOM_PALETTE], config[SETTINGS.PALETTE_TYPE]);\n          const newCustomPalette = encodeCustomPalette(oldColorSet, v);\n          dispatch(updateConfig(SETTINGS.CUSTOM_PALETTE, newCustomPalette));\n          updateUrl(SETTINGS.CUSTOM_PALETTE, newCustomPalette);\n        }\n        break;\n      case SETTINGS.PALETTE_NAME:\n      case SETTINGS.GRADIENT_NAME:\n        break;\n      default:\n        console.log(`Unknown settings key: '${k}'`);\n    }\n    // store value in context\n    dispatch(updateConfig(k,v));\n    updateUrl(k, v);\n  }\n  function getValue(key) {\n    if (Object.keys(config).includes(key)) return config[key];\n    return '';\n  }\n  return (\n    <div>\n      <h1>Make it yours</h1>\n      <div id='settings'>\n        <div className='setting'>\n          <label>Palette type:</label>\n          <div id='palette-type-options'>\n            {Object.entries({\n              'Monochrome (use default color)': PALETTE_TYPES.MONOCHROME,\n              'Repeating cycle': PALETTE_TYPES.CYCLE,\n              'Gradient': PALETTE_TYPES.GRADIENT\n            }).map(([label, key]) =>\n              <div key={`palette_type_${key}`}>\n                <input type='radio' name='palette_type' value={key} id={`palette_type_${key}`}\n                  checked={config[SETTINGS.PALETTE_TYPE] === key}\n                  onChange={(e) => myUpdateConfig(SETTINGS.PALETTE_TYPE, e.target.value)}\n                />\n                <label htmlFor={`palette_type_${key}`}>{label}</label>\n                  {PALETTE_TYPES.CYCLE === key && config[SETTINGS.PALETTE_TYPE] === key ?\n                    <div id='palette-options'>\n                      <span className='help'>Palette colors will cycle and repeat with depth.</span>\n                      {Object.entries(PALETTES).map(([palette_name, palette_colors]) => (\n                        <div key={`palette_cycle_${palette_name}`}>\n                          <input type='radio' name='palette' value={palette_name} id={`palette_cycle_${palette_name}`}\n                            checked={config[SETTINGS.PALETTE_NAME] === palette_name}\n                            onChange={(e) => myUpdateConfig(SETTINGS.PALETTE_NAME, e.target.value)}\n                          />\n                          <label htmlFor={`palette_cycle_${palette_name}`}>\n                            {palette_name === 'custom' &&\n                              <CustomPalette\n                                type={key}\n                              />\n                            }\n                            {palette_colors.map(c => (\n                              <div className='colorsample' style={{backgroundColor: c}} key={`palette_cycle_${palette_name}_${c.replace(/[^0-9a-zA-Z]/, '')}`}/>\n                            ))}\n                          </label>\n                        </div>\n                      ))}\n                    </div>                      \n                  : null}\n                  {PALETTE_TYPES.GRADIENT === key && config[SETTINGS.PALETTE_TYPE] === key ?\n                    <div id='gradient-options'>\n                      <span className='help'>Palette colors transition between two or more colors.</span>\n                      {Object.entries(GRADIENTS).map(([gradient_name, gradient_points]) => (\n                        <div key={`palette_gradient_${gradient_name}`}>\n                          <input type='radio' name='palette' value={gradient_name} id={`palette_gradient_${gradient_name}`}\n                            checked={config[SETTINGS.PALETTE_NAME] === gradient_name}\n                            onChange={(e) => myUpdateConfig(SETTINGS.PALETTE_NAME, e.target.value)}\n                          />\n                          <label htmlFor={`palette_gradient_${gradient_name}`}>\n                            {gradient_name === 'custom' &&\n                              <CustomPalette\n                                type={key}\n                              />\n                            }\n                            {Object.entries(getGradientEntries(gradient_points)).map(([d,c]) => (\n                              <div className='colorsample gradient' style={{backgroundColor: c}} key={`palette_gradient_${gradient_name}_${d}_${c.replace(/[^0-9a-zA-Z]/, '')}`}/>\n                            ))}\n                          </label>\n                        </div>\n                      ))}\n                    </div>\n                  : null}\n              </div>\n            )}\n          </div>\n        </div>\n        <div className='setting'>\n          <label htmlFor='default-color'>Default color:</label>\n          <input id='default-color' type='text' value={getValue(SETTINGS.DEFAULT_COLOR)} onChange={(e) => myUpdateConfig(SETTINGS.DEFAULT_COLOR, e.target.value)}/>\n          <div id='default-color-sample' className='colorsample'/>\n          <br/><span className='help'>Can be any valid HTML color name, or a code in #rgb or #rrggbb format.</span>\n        </div>\n        <button onClick={doSculpt}>{`Let's Sculpt!`}</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Config;\n","const DEBUG_BINARYTOOLS = false;\n\nexport function bitArrayToBase64(bitArray) {\n  if (DEBUG_BINARYTOOLS) console.log(\"bitArrayToBase64, got bitArray=\",bitArray);\n  // convert bitstream to binary data\n  let binaryData = '';\n  while (bitArray.length > 0) {\n    // get the next 8 bits\n    const eightbits = bitArray.splice(0, 8);\n    if (DEBUG_BINARYTOOLS) console.log(\"spliced: \",eightbits);\n    // convert these 8 bits to a byte\n    let byte=0;\n    for (let i=0; i<8 && i<eightbits.length; i++) {\n      const n = eightbits[i] * 2**(7-i);\n      byte += n;\n      if (DEBUG_BINARYTOOLS) console.log(`Adding ${eightbits[i]} * (2**(7-${i})=${2**(7-i)}) }=${n} to byte, now=${byte}`);\n    }\n    binaryData += String.fromCharCode(byte);\n    if (DEBUG_BINARYTOOLS) console.log(`Appending byte ${byte} to binaryData,  now='${binaryData}'`);\n  }\n  // convert binary data to base64 string\n  const base64 = btoa(binaryData);\n  if (DEBUG_BINARYTOOLS) console.log(`returning base64='${base64}'`);\n  return base64;\n}\n\nexport function base64toBitArray(base64) {\n  if (DEBUG_BINARYTOOLS) console.log(`base64toBitArray, got base64='${base64}'`);\n  let binaryData = atob(base64);\n  if (DEBUG_BINARYTOOLS) console.log(`binaryData='${binaryData}'`);\n  let bitArray=[];\n  while (binaryData.length > 0) {\n    // Shift off the next byte of the string\n    const byte = binaryData.substring(0,1);\n    binaryData = binaryData.slice(1);\n    if (DEBUG_BINARYTOOLS) console.log(`Looking at next byte='${byte}'`)\n    const byteInt = byte.charCodeAt(0);\n    if (DEBUG_BINARYTOOLS) console.log(`next byte numerical value is ${byteInt}`);\n    for (let i=7; i>=0; i--) {\n      const bit = (byteInt & (2**i)) > 0 ? 1 : 0;\n      bitArray.push(bit);\n      if (DEBUG_BINARYTOOLS) console.log(`Adding ${bit} to the bitArray`);\n    }\n  }\n  // trim 0s from the trailing end\n  while (bitArray[bitArray.length-1] === 0) bitArray.pop();\n  if (DEBUG_BINARYTOOLS) console.log(\"Returning bitArray=\",bitArray);\n  return bitArray;\n}\n\nexport function parseBitStream(bitstream, depth) {\n  if (bitstream.length === 0) return [[0,0], []];\n  if (DEBUG_BINARYTOOLS) console.log(\"\\t\".repeat(depth)+\"parseBitStream:\",bitstream)\n  const sculptPath = [];\n  let cellCount = 0;\n  while (cellCount < 2 && bitstream.length > 0) {\n    // Shift off the first element for myself\n    const thisBit = bitstream.shift();\n    if (DEBUG_BINARYTOOLS) console.log(\"\\t\".repeat(depth)+`parseBitStream: (processing ${thisBit})`);\n    cellCount++;\n    if (thisBit) {\n      let childPath;\n      [childPath, bitstream] = parseBitStream(bitstream, depth+1);\n      if (DEBUG_BINARYTOOLS) console.log(\"\\t\".repeat(depth)+\"parseBitStream: adding child path\",childPath);\n      sculptPath.push(childPath);\n    } else {\n      sculptPath.push(thisBit);\n    }\n  }\n  if (DEBUG_BINARYTOOLS) console.log(\"\\t\".repeat(depth)+\"parseBitStream returning sculptPath:\",sculptPath,\", and remainder=\",bitstream);\n  return [sculptPath, bitstream];\n}\n","import { useState, useEffect } from 'react';\nimport './App.css';\nimport BinaryTreeArtPixel from './components/BinaryTreeArtPixel.js';\nimport { useConfigContext, updateConfig, SETTINGS, parseUrl, updateUrl } from './contexts/ConfigContext';\nimport Config from './components/Config.js';\nimport { bitArrayToBase64, base64toBitArray, parseBitStream } from './lib/binaryTools.js';\n\nfunction App() {\n  const { config, dispatch: configDispatch } = useConfigContext();\n  const VIEWS={\n    CONFIG:3,\n    MENU:2,\n    SCULPT:1\n  };\n  const [currentView, setCurrentView] = useState(VIEWS.CONFIG);\n  const [loadedSculptPath, setLoadedSculptPath] = useState(null);\n  useEffect(() => {\n    const params = parseUrl();\n    // load config\n    Object.entries(params).forEach( ([key,value]) => {\n      if (Object.values(SETTINGS).includes(key)) {\n        configDispatch(updateConfig(key, value));\n      }\n    });\n    // Process sculpt path in URL\n    if (params[SETTINGS.SCULPT_PATH] && config[SETTINGS.SCULPT_PATH] !== params[SETTINGS.SCULPT_PATH]) {\n      config[SETTINGS.SCULPT_PATH] = params[SETTINGS.SCULPT_PATH];\n    }\n  },[window.location.hash]);\n  useEffect(() => {\n    if (!config[SETTINGS.SCULPT_PATH]) return;\n    const bitstream = base64toBitArray(config[SETTINGS.SCULPT_PATH]);\n    // replay loaded sculptpath\n    const [sculptPath] = parseBitStream(bitstream, 0);\n    //console.log(\"Parsed bitstream is:\",sculptPath);\n    if (sculptPath.length) {\n      console.log(\"starting replay\");\n      doSculpt();\n      setLoadedSculptPath(sculptPath[0]);\n      console.log(\"window.performance.memory =\",window.performance.memory);\n    }\n  }, [config[SETTINGS.SCULPT_PATH]])\n\n  function doMEnu() {\n    setCurrentView(VIEWS.MENU);\n  }\n  function doConfig() {\n    setCurrentView(VIEWS.CONFIG);\n  }\n  function doSculpt() {\n    setCurrentView(VIEWS.SCULPT);\n  }\n  function updateSculptPath(bitstream) {\n    const base64 = bitArrayToBase64(bitstream);\n    updateUrl(SETTINGS.SCULPT_PATH, base64)\n  }\n  function resetSculpture() {\n    setLoadedSculptPath(-1);\n    setTimeout(() => setLoadedSculptPath(null), 10);\n  }\n  return (\n    <div className=\"App\">\n      {currentView === VIEWS.MENU ?\n        <div id=\"main-menu\">\n          <h1>Le Menu</h1>\n          <button onClick={doSculpt}>Sculpt!</button>\n          <button onClick={doConfig}>\n            Configure<br/>\n            (Set your palette, etc.)\n          </button>\n          <a target=\"_blank\" rel=\"noreferrer\" className='button' href=\"https://github.com/benjaminbradley/pixelsculptor#readme\">About</a>\n        </div>\n      :\n        <div>\n          <div className='canvasButtons'>\n            <button id='goToMenu' onClick={doMEnu}>Menu</button>\n            <button onClick={resetSculpture}>Reset</button>\n          </div>\n          {currentView === VIEWS.CONFIG?\n            <Config\n              doSculpt={doSculpt}\n            />\n          :\n            <BinaryTreeArtPixel\n              depth={0}\n              orientation={'v'}\n              onUpdate={updateSculptPath}\n              loadSculptPath={loadedSculptPath}\n            />\n          }\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ConfigProvider } from './contexts/ConfigContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ConfigProvider>\n      <App />\n    </ConfigProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}