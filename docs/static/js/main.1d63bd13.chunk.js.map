{"version":3,"sources":["components/BinaryTreeArtPixel.js","components/BinaryTreeArt.js","App.js","reportWebVitals.js","index.js"],"names":["BinaryTreeArtPixel","depth","orientation","useState","split","setSplit","classNames","className","join","data-depth","onClick","BinaryTreeArt","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MA6BeA,MA3Bf,SAASA,EAAT,GAGI,IAFFC,EAEC,EAFDA,MACAC,EACC,EADDA,YACC,EAC2BC,oBAAS,GADpC,mBACOC,EADP,KACcC,EADd,KAEKC,EAAW,CAAC,OAAQJ,GAC1B,OAASE,EAMP,oBAAGG,UAAWD,EAAWE,KAAK,KAC5BC,aAAYR,EADd,UAGI,cAACD,EAAD,CACEC,MAAOA,EAAM,EACbC,YAA6B,MAAhBA,EAAsB,IAAM,MAE3C,cAACF,EAAD,CACEC,MAAOA,EAAM,EACbC,YAA6B,MAAhBA,EAAsB,IAAM,SAd/C,mBAAGK,UAAWD,EAAWE,KAAK,KAC5BE,QAAS,kBAAML,GAAS,IACxBI,aAAYR,KCsBHU,MA9Bf,YAEI,IADFT,EACC,EADDA,YACC,EAC2BC,oBAAS,GADpC,mBACOC,EADP,KACcC,EADd,KAEGC,EAAa,CAAC,OAAQ,QAC1B,OACE,8BACIF,EAMA,oBAAGG,UAAWD,EAAWE,KAAK,KAC5BC,aAAY,EADd,UAGI,cAAC,EAAD,CACER,MAAO,EACPC,YAA6B,MAAhBA,EAAsB,IAAM,MAE3C,cAAC,EAAD,CACED,MAAO,EACPC,YAA6B,MAAhBA,EAAsB,IAAM,SAd/C,mBAAGK,UAAWD,EAAWE,KAAK,KAC5BE,QAAS,kBAAML,GAAS,IACxBI,aAAY,OCAPG,MAVf,WACE,OACE,qBAAKL,UAAU,MAAf,SACE,cAAC,EAAD,CACEL,YAAa,SCKNW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.1d63bd13.chunk.js","sourcesContent":["import { useState } from 'react';\n\nfunction BinaryTreeArtPixel({\n  depth,\n  orientation\n}) {\n  const [ split, setSplit ] = useState(false);\n  const classNames=['btap', orientation];\n  return (!split ?\n    <p className={classNames.join(' ')}\n      onClick={() => setSplit(true)}\n      data-depth={depth}\n    />\n  :\n    <p className={classNames.join(' ')}\n      data-depth={depth}\n    >\n        <BinaryTreeArtPixel\n          depth={depth+1}\n          orientation={orientation === 'h' ? 'v' : 'h'}\n        />\n        <BinaryTreeArtPixel\n          depth={depth+1}\n          orientation={orientation === 'h' ? 'v' : 'h'}\n        />\n    </p>\n  );\n}\n\nexport default BinaryTreeArtPixel;\n","import { useState } from 'react';\nimport BinaryTreeArtPixel from './BinaryTreeArtPixel.js';\n\nfunction BinaryTreeArt({\n  orientation\n}) {\n  const [ split, setSplit ] = useState(false);\n  let classNames = ['btap', 'base'];\n  return (\n    <div>\n      {!split ?\n        <p className={classNames.join(' ')}\n          onClick={() => setSplit(true)}\n          data-depth={0}\n        />\n      :\n        <p className={classNames.join(' ')}\n          data-depth={0}\n        >\n            <BinaryTreeArtPixel\n              depth={1}\n              orientation={orientation === 'h' ? 'v' : 'h'}\n            />\n            <BinaryTreeArtPixel\n              depth={1}\n              orientation={orientation === 'h' ? 'v' : 'h'}\n            />\n        </p>\n      }\n    </div>\n  );\n}\n\nexport default BinaryTreeArt;\n","import './App.css';\nimport BinaryTreeArt from './components/BinaryTreeArt.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BinaryTreeArt\n        orientation={'v'}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}