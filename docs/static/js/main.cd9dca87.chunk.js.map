{"version":3,"sources":["contexts/ConfigContext.js","palettes.js","components/BinaryTreeArtPixel.js","components/Config.js","lib/binaryTools.js","App.js","reportWebVitals.js","index.js"],"names":["ConfigContext","createContext","ACTIONS","SETTINGS","SCULPT_PATH","PALETTE_NAME","DEFAULT_COLOR","initialState","parseUrl","window","location","hash","length","params","substring","split","forEach","pair","key","value","decodeURIComponent","updateUrl","setting_key","raw_value","newHash","Object","entries","map","encodeURIComponent","join","updateConfig","type","configReducer","state","action","ConfigProvider","props","useReducer","configData","config","dispatch","Provider","useConfigContext","useContext","PALETTES","a","b","c","d","e","f","g","h","i","j","bw","BinaryTreeArtPixel","loadSculptPath","onUpdate","depth","orientation","useState","setSplit","c1LoadSculptPath","setC1LoadSculptPath","c2LoadSculptPath","setC2LoadSculptPath","LOADSTATE","loadState","useRef","useEffect","prototype","toString","call","current","dfsp","c1","c2","updateDfsp","concat","classNames","push","bg","curPaletteName","keys","includes","curPalette","className","data-depth","style","backgroundColor","bitstream","onClick","Config","doSculpt","myUpdateConfig","k","v","document","documentElement","setProperty","console","log","id","htmlFor","onChange","target","name","checked","palette_name","palette_colors","replace","parseBitStream","sculptPath","cellCount","thisBit","shift","childPath","App","configDispatch","VIEWS","currentView","setCurrentView","loadedSculptPath","setLoadedSculptPath","values","base64","binaryData","atob","bitArray","byte","slice","byteInt","charCodeAt","bit","pop","base64toBitArray","performance","memory","rel","href","setTimeout","eightbits","splice","String","fromCharCode","btoa","bitArrayToBase64","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cd9dca87.chunk.js","sourcesContent":["import { createContext, useReducer, useContext } from 'react';\n\nexport const ConfigContext = createContext();\n\nexport const ACTIONS = {\n  UPDATE:1\n};\n\nexport const SETTINGS = {\n  SCULPT_PATH: 's',\n  PALETTE_NAME: 'p',\n  DEFAULT_COLOR: 'd'\n};\n\n// Initial state\nconst initialState = {\n  [SETTINGS.PALETTE_NAME]: 'none',\n  [SETTINGS.DEFAULT_COLOR]: '#ddd'\n};\n\nexport function parseUrl() {\n  if (window.location.hash.length === 0) return {};\n  const params={};\n  window.location.hash.substring(1).split('&').forEach(pair => {\n    const [key, value] = pair.split('=');\n    params[key] = decodeURIComponent(value);\n  });\n  return params;\n}\n\nexport function updateUrl(setting_key, raw_value) {\n  const params = parseUrl();\n  params[setting_key] = raw_value;\n  const newHash = Object.entries(params).map(\n    ([key,value]) => `${key}=${encodeURIComponent(value)}`\n  ).join('&');\n  window.location.hash = newHash;\n}\n\n// Action creators\nexport function updateConfig(key, value) {\n  return { type: ACTIONS.UPDATE, key, value };\n}\n\n// Reducer\nexport const configReducer = (state, action) => {\n  switch (action.type) {\n    case ACTIONS.UPDATE:\n      return { ...state, [action.key]: action.value };\n    default:\n      return state;\n  }\n}\n\nfunction ConfigProvider(props) {\n  const [config, dispatch] = useReducer(configReducer, initialState);\n  const configData = { config, dispatch };\n  return <ConfigContext.Provider value={configData} {...props} />;\n}\n\nfunction useConfigContext() {\n  return useContext(ConfigContext);\n}\n\nexport { ConfigProvider, useConfigContext };\n","const PALETTES = {\n  a: ['#b2b2b2', '#50394c', '#f4e1d2', '#ffef96'],\n  b: ['#80ced6', '#d5f4e6', '#fefbd8', '#618685'],\n  c: ['#034f84', '#92a8d1', '#f7cac9', '#f7786b'],\n  d: ['#4040a1', '#36486b', '#618685', '#fefbd8'],\n  e: ['#6b5b95', '#878f99', '#a2b9bc', '#b2ad7f'],\n  f: ['#622569', '#b8a9c9', '#d6d4e0', '#5b9aa0'],\n  g: ['#c83349', '#e06377', '#eeac99', '#f9d5e5'],\n  h: ['#ff7b25', '#d64161', '#6b5b95', '#feb236'],\n  i: ['#d96459', '#f2ae72', '#588c7e', '#f2e394'],\n  j: ['#b2ad7f', '#878f99', '#a2b9bc', '#6b5b95'],\n  bw: ['#fff', '#000']\n};\nexport default PALETTES;\n","import { useState, useEffect, useRef } from 'react';\nimport { useConfigContext, SETTINGS } from '../contexts/ConfigContext';\nimport PALETTES from '../palettes';\n\nfunction BinaryTreeArtPixel({\n  loadSculptPath,\n  onUpdate,\n  depth,\n  orientation\n}) {\n  const { config } = useConfigContext();\n  const [ split, setSplit ] = useState(false);\n  const [c1LoadSculptPath, setC1LoadSculptPath] = useState(null);\n  const [c2LoadSculptPath, setC2LoadSculptPath] = useState(null);\n  const LOADSTATE = {NA:0, LOADING:1, DONE:2};\n  const loadState = useRef(LOADSTATE.NA);\n\n  useEffect(() => {\n    if (loadSculptPath === -1 && split) {\n      // propagate reset action\n      setC1LoadSculptPath(-1);\n      setC2LoadSculptPath(-1);\n      setSplit(false);\n    }\n    if (Object.prototype.toString.call( loadSculptPath ) === '[object Array]' && loadState.current === LOADSTATE.NA) {\n      // propagate load action\n      loadState.current = LOADSTATE.LOADING;\n      setSplit(true);\n      if (loadSculptPath.length > 0) {\n        setC1LoadSculptPath(loadSculptPath[0]);\n        if (loadSculptPath.length > 1)\n          setC2LoadSculptPath(loadSculptPath[1]);\n      }\n      loadState.current = LOADSTATE.DONE;\n    }\n  }, [loadSculptPath]);\n  const dfsp = useRef([0]);\n  const c1 = useRef([]);\n  const c2 = useRef([]);\n  function updateDfsp() {\n    if (split) {\n      dfsp.current = [1].concat(c1.current, c2.current);\n    } else {\n      dfsp.current = [0];\n    }\n    // if loading, don't propagate upwards\n    if (Object.prototype.toString.call( loadSculptPath ) === '[object Array]' && loadState.current === LOADSTATE.LOADING) return;\n    onUpdate(dfsp.current);\n  }\n  useEffect(() => {\n    updateDfsp();\n  }, [split, c1, c2, onUpdate]);\n  function updateC1(bitstream) {\n    c1.current = bitstream;\n    updateDfsp();\n  }\n  function updateC2(bitstream) {\n    c2.current = bitstream;\n    updateDfsp();\n  }\n\n  const classNames=['btap', orientation];\n  if (depth === 0) classNames.push('base');\n\n  let bg=null;\n  const curPaletteName = config[SETTINGS.PALETTE_NAME];\n  if (curPaletteName && Object.keys(PALETTES).includes(curPaletteName)) {\n    const curPalette = PALETTES[curPaletteName];\n    const palIdx = depth % curPalette.length;\n    bg=curPalette[palIdx];\n  }\n\n  return (!split ?\n    <div className={classNames.join(' ')}\n      onClick={() => setSplit(true)}\n      data-depth={depth}\n      style={bg ? {backgroundColor: bg} : null}\n    />\n  :\n    <div className={classNames.join(' ')}\n      data-depth={depth}\n      style={bg ? {backgroundColor: bg} : null}\n    >\n        <BinaryTreeArtPixel\n          depth={depth+1}\n          orientation={orientation === 'h' ? 'v' : 'h'}\n          onUpdate={updateC1}\n          loadSculptPath={c1LoadSculptPath}\n        />\n        <BinaryTreeArtPixel\n          depth={depth+1}\n          orientation={orientation === 'h' ? 'v' : 'h'}\n          onUpdate={updateC2}\n          loadSculptPath={c2LoadSculptPath}\n        />\n    </div>\n  );\n}\n\nexport default BinaryTreeArtPixel;\n","import { useConfigContext, updateConfig, SETTINGS, updateUrl } from '../contexts/ConfigContext';\nimport PALETTES from '../palettes';\n\nfunction Config({doSculpt}) {\n  const { config, dispatch } = useConfigContext();\n  function myUpdateConfig(k,v) {\n    // store value in context\n    dispatch(updateConfig(k,v));\n    updateUrl(k, v);\n    // update CSS\n    switch(k) {\n      case SETTINGS.DEFAULT_COLOR:\n        document.documentElement.style.setProperty('--default-color', v);\n        break;\n      case SETTINGS.PALETTE_NAME:\n        break;\n      default:\n        console.log(`Unknown settings key: '${k}'`);\n    }\n  }\n  function getValue(key) {\n    if (Object.keys(config).includes(key)) return config[key];\n    return '';\n  }\n  return (\n    <div>\n      <h1>Make it yours</h1>\n      <div id='settings'>\n        <div className='setting'>\n            <label htmlFor='default-color'>Default color:</label>\n            <input id='default-color' type='text' value={getValue(SETTINGS.DEFAULT_COLOR)} onChange={(e) => myUpdateConfig(SETTINGS.DEFAULT_COLOR, e.target.value)}/>\n            <div id='default-color-sample' className='colorsample'/>\n            <br/><span className='help'>Can be any valid HTML color name, or a code in #rgb or #rrggbb format.</span>\n        </div>\n        <div className='setting'>\n            <label>Palette:</label>\n            <div id='palette-options' onChange={(e) => myUpdateConfig(SETTINGS.PALETTE_NAME, e.target.value)}>\n              <div>\n                <input type='radio' name='palette' value={'none'} id={`palette_none`}\n                  checked={config[SETTINGS.PALETTE_NAME] === 'none'}\n                />\n                <label htmlFor={`palette_none`}>None (use default color)</label>\n              </div>\n              {Object.entries(PALETTES).map(([palette_name, palette_colors]) => (\n                <div key={`palette_${palette_name}`}>\n                  <input type='radio' name='palette' value={palette_name} id={`palette_${palette_name}`}\n                    checked={config[SETTINGS.PALETTE_NAME] === palette_name}\n                  />\n                  <label htmlFor={`palette_${palette_name}`}>\n                    {palette_colors.map(c => (\n                      <div className='colorsample' style={{backgroundColor: c}} key={`palette_${palette_name}_${c.replace(/[^0-9a-zA-Z]/, '')}`}/>\n                    ))}\n                  </label>\n                </div>\n              ))}\n            </div>\n            <span className='help'>Palette colors will cycle and repeat with depth.</span>\n        </div>\n        <button onClick={doSculpt}>{`Let's Sculpt!`}</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Config;\n","const DEBUG_BINARYTOOLS = false;\n\nexport function bitArrayToBase64(bitArray) {\n  if (DEBUG_BINARYTOOLS) console.log(\"bitArrayToBase64, got bitArray=\",bitArray);\n  // convert bitstream to binary data\n  let binaryData = '';\n  while (bitArray.length > 0) {\n    // get the next 8 bits\n    const eightbits = bitArray.splice(0, 8);\n    if (DEBUG_BINARYTOOLS) console.log(\"spliced: \",eightbits);\n    // convert these 8 bits to a byte\n    let byte=0;\n    for (let i=0; i<8 && i<eightbits.length; i++) {\n      const n = eightbits[i] * 2**(7-i);\n      byte += n;\n      if (DEBUG_BINARYTOOLS) console.log(`Adding ${eightbits[i]} * (2**(7-${i})=${2**(7-i)}) }=${n} to byte, now=${byte}`);\n    }\n    binaryData += String.fromCharCode(byte);\n    if (DEBUG_BINARYTOOLS) console.log(`Appending byte ${byte} to binaryData,  now='${binaryData}'`);\n  }\n  // convert binary data to base64 string\n  const base64 = btoa(binaryData);\n  if (DEBUG_BINARYTOOLS) console.log(`returning base64='${base64}'`);\n  return base64;\n}\n\nexport function base64toBitArray(base64) {\n  if (DEBUG_BINARYTOOLS) console.log(`base64toBitArray, got base64='${base64}'`);\n  let binaryData = atob(base64);\n  if (DEBUG_BINARYTOOLS) console.log(`binaryData='${binaryData}'`);\n  let bitArray=[];\n  while (binaryData.length > 0) {\n    // Shift off the next byte of the string\n    const byte = binaryData.substring(0,1);\n    binaryData = binaryData.slice(1);\n    if (DEBUG_BINARYTOOLS) console.log(`Looking at next byte='${byte}'`)\n    const byteInt = byte.charCodeAt(0);\n    if (DEBUG_BINARYTOOLS) console.log(`next byte numerical value is ${byteInt}`);\n    for (let i=7; i>=0; i--) {\n      const bit = (byteInt & (2**i)) > 0 ? 1 : 0;\n      bitArray.push(bit);\n      if (DEBUG_BINARYTOOLS) console.log(`Adding ${bit} to the bitArray`);\n    }\n  }\n  // trim 0s from the trailing end\n  while (bitArray[bitArray.length-1] === 0) bitArray.pop();\n  if (DEBUG_BINARYTOOLS) console.log(\"Returning bitArray=\",bitArray);\n  return bitArray;\n}\n\nexport function parseBitStream(bitstream, depth) {\n  if (bitstream.length === 0) return [[0,0], []];\n  if (DEBUG_BINARYTOOLS) console.log(\"\\t\".repeat(depth)+\"parseBitStream:\",bitstream)\n  const sculptPath = [];\n  let cellCount = 0;\n  while (cellCount < 2 && bitstream.length > 0) {\n    // Shift off the first element for myself\n    const thisBit = bitstream.shift();\n    if (DEBUG_BINARYTOOLS) console.log(\"\\t\".repeat(depth)+`parseBitStream: (processing ${thisBit})`);\n    cellCount++;\n    if (thisBit) {\n      let childPath;\n      [childPath, bitstream] = parseBitStream(bitstream, depth+1);\n      if (DEBUG_BINARYTOOLS) console.log(\"\\t\".repeat(depth)+\"parseBitStream: adding child path\",childPath);\n      sculptPath.push(childPath);\n    } else {\n      sculptPath.push(thisBit);\n    }\n  }\n  if (DEBUG_BINARYTOOLS) console.log(\"\\t\".repeat(depth)+\"parseBitStream returning sculptPath:\",sculptPath,\", and remainder=\",bitstream);\n  return [sculptPath, bitstream];\n}\n","import { useState, useEffect } from 'react';\nimport './App.css';\nimport BinaryTreeArtPixel from './components/BinaryTreeArtPixel.js';\nimport { useConfigContext, updateConfig, SETTINGS, parseUrl, updateUrl } from './contexts/ConfigContext';\nimport Config from './components/Config.js';\nimport { bitArrayToBase64, base64toBitArray, parseBitStream } from './lib/binaryTools.js';\n\nfunction App() {\n  const { dispatch: configDispatch } = useConfigContext();\n  const VIEWS={\n    CONFIG:3,\n    MENU:2,\n    SCULPT:1\n  };\n  const [currentView, setCurrentView] = useState(VIEWS.CONFIG);\n  const [loadedSculptPath, setLoadedSculptPath] = useState(null);\n  useEffect(() => {\n    const params = parseUrl();\n    // load config\n    Object.entries(params).forEach( ([key,value]) => {\n      if (Object.values(SETTINGS).includes(key)) {\n        configDispatch(updateConfig(key, value));\n      }\n    });\n    // Process sculpt path in URL\n    if (params[SETTINGS.SCULPT_PATH]) {\n      const bitstream = base64toBitArray(params[SETTINGS.SCULPT_PATH]);\n      // replay loaded sculptpath\n      const [sculptPath] = parseBitStream(bitstream, 0);\n      //console.log(\"Parsed bitstream is:\",sculptPath);\n      if (sculptPath.length) {\n        console.log(\"starting replay\");\n        doSculpt();\n        setLoadedSculptPath(sculptPath[0]);\n        console.log(\"window.performance.memory =\",window.performance.memory);\n      }\n    }\n  },[window.location.hash]);\n  function doMEnu() {\n    setCurrentView(VIEWS.MENU);\n  }\n  function doConfig() {\n    setCurrentView(VIEWS.CONFIG);\n  }\n  function doSculpt() {\n    setCurrentView(VIEWS.SCULPT);\n  }\n  function updateSculptPath(bitstream) {\n    const base64 = bitArrayToBase64(bitstream);\n    updateUrl(SETTINGS.SCULPT_PATH, base64)\n  }\n  function resetSculpture() {\n    setLoadedSculptPath(-1);\n    setTimeout(() => setLoadedSculptPath(null), 10);\n  }\n  return (\n    <div className=\"App\">\n      {currentView === VIEWS.MENU ?\n        <div id=\"main-menu\">\n          <h1>Le Menu</h1>\n          <button onClick={doSculpt}>Sculpt!</button>\n          <button onClick={doConfig}>\n            Configure<br/>\n            (Set your palette, etc.)\n          </button>\n          <a target=\"_blank\" rel=\"noreferrer\" className='button' href=\"https://github.com/benjaminbradley/pixelsculptor#readme\">About</a>\n        </div>\n      :\n        <div>\n          <div className='canvasButtons'>\n            <button id='goToMenu' onClick={doMEnu}>Menu</button>\n            <button onClick={resetSculpture}>Reset</button>\n          </div>\n          {currentView === VIEWS.CONFIG?\n            <Config\n              doSculpt={doSculpt}\n            />\n          :\n            <BinaryTreeArtPixel\n              depth={0}\n              orientation={'v'}\n              onUpdate={updateSculptPath}\n              loadSculptPath={loadedSculptPath}\n            />\n          }\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ConfigProvider } from './contexts/ConfigContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ConfigProvider>\n      <App />\n    </ConfigProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}