{"version":3,"sources":["contexts/ConfigContext.js","lib/paletteTools.js","components/BinaryTreeArtPixel.js","components/Config.js","lib/binaryTools.js","App.js","reportWebVitals.js","index.js"],"names":["SETTINGS","SCULPT_PATH","PALETTE_TYPE","PALETTE_NAME","DEFAULT_COLOR","PALETTE_TYPES","initialState","ConfigContext","createContext","ACTIONS","parseUrl","window","location","hash","length","params","substring","split","forEach","pair","key","value","decodeURIComponent","updateUrl","setting_key","raw_value","newHash","Object","entries","map","encodeURIComponent","join","updateConfig","type","configReducer","state","action","ConfigProvider","props","useReducer","configData","config","dispatch","Provider","useConfigContext","useContext","PALETTES","a","b","c","d","e","f","g","h","i","j","bw","GRADIENTS","0","15","6","5","10","gs","memo_cache","colorToRGBA","canvas","document","createElement","width","height","ctx","getContext","factory","call","memoize","col","clearRect","fillStyle","computed","fillRect","getImageData","data","getBetween","init","final","percent","getGradientEntries","gradient_points","sortedDepthPoints","keys","parseInt","sort","minIdx","maxIdx","gradColors","minDepth","maxDepth","initialColor","finalColor","colorPoint","Math","round","concat","toString","padStart","BinaryTreeArtPixel","loadSculptPath","onUpdate","depth","orientation","useState","setSplit","c1LoadSculptPath","setC1LoadSculptPath","c2LoadSculptPath","setC2LoadSculptPath","LOADSTATE","loadState","useRef","useEffect","prototype","current","dfsp","c1","c2","updateDfsp","classNames","push","bg","curPaletteName","includes","curPalette","console","log","gradPaletteName","getColor","className","data-depth","style","backgroundColor","bitstream","onClick","Config","doSculpt","myUpdateConfig","k","v","documentElement","setProperty","GRADIENT_NAME","id","label","name","checked","onChange","target","htmlFor","palette_name","palette_colors","replace","gradient_name","parseBitStream","sculptPath","cellCount","thisBit","shift","childPath","App","configDispatch","VIEWS","currentView","setCurrentView","loadedSculptPath","setLoadedSculptPath","values","base64","binaryData","atob","bitArray","byte","slice","byteInt","charCodeAt","bit","pop","base64toBitArray","performance","memory","rel","href","setTimeout","eightbits","splice","String","fromCharCode","btoa","bitArrayToBase64","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"kPAEaA,EAAW,CACtBC,YAAa,IACbC,aAAc,KACdC,aAAc,IACdC,cAAe,KAGJC,EACD,IADCA,EAEJ,IAFIA,EAGC,IAIRC,GAAY,mBACfN,EAASE,aAAeG,GADT,cAEfL,EAASG,aAAe,MAFT,cAGfH,EAASI,cAAgB,QAHV,GAMLG,EAAgBC,0BAEhBC,EACJ,EAGF,SAASC,IACd,GAAoC,IAAhCC,OAAOC,SAASC,KAAKC,OAAc,MAAO,GAC9C,IAAMC,EAAO,GAMb,OALAJ,OAAOC,SAASC,KAAKG,UAAU,GAAGC,MAAM,KAAKC,SAAQ,SAAAC,GAAS,IAAD,EACtCA,EAAKF,MAAM,KAD2B,mBACpDG,EADoD,KAC/CC,EAD+C,KAEvDA,EAAMP,SACRC,EAAOK,GAAOE,mBAAmBD,OAE9BN,EAGF,SAASQ,EAAUC,EAAaC,GACrC,IAAMV,EAASL,IACfK,EAAOS,GAAeC,EACtB,IAAMC,EAAUC,OAAOC,QAAQb,GAAQc,KACrC,mCAAET,EAAF,KAAMC,EAAN,qBAAoBD,EAApB,YAA2BU,mBAAmBT,OAC9CU,KAAK,KACPpB,OAAOC,SAASC,KAAOa,EAIlB,SAASM,EAAaZ,EAAKC,GAChC,MAAO,CAAEY,KAAMxB,EAAgBW,MAAKC,SAI/B,IAAMa,EAAgB,SAACC,EAAOC,GACnC,OAAQA,EAAOH,MACb,KAAKxB,EACH,OAAO,2BAAK0B,GAAZ,kBAAoBC,EAAOhB,IAAMgB,EAAOf,QAC1C,QACE,OAAOc,IAIb,SAASE,EAAeC,GAAQ,IAAD,EACFC,qBAAWL,EAAe5B,GADxB,mBAEvBkC,EAAa,CAAEC,OAFQ,KAEAC,SAFA,MAG7B,OAAO,cAACnC,EAAcoC,SAAf,aAAwBtB,MAAOmB,GAAgBF,IAGxD,SAASM,IACP,OAAOC,qBAAWtC,G,WCpEPuC,EAAW,CACtBC,EAAG,CAAC,UAAW,UAAW,UAAW,WACrCC,EAAG,CAAC,UAAW,UAAW,UAAW,WACrCC,EAAG,CAAC,UAAW,UAAW,UAAW,WACrCC,EAAG,CAAC,UAAW,UAAW,UAAW,WACrCC,EAAG,CAAC,UAAW,UAAW,UAAW,WACrCC,EAAG,CAAC,UAAW,UAAW,UAAW,WACrCC,EAAG,CAAC,UAAW,UAAW,UAAW,WACrCC,EAAG,CAAC,UAAW,UAAW,UAAW,WACrCC,EAAG,CAAC,UAAW,UAAW,UAAW,WACrCC,EAAG,CAAC,UAAW,UAAW,UAAW,WACrCC,GAAI,CAAC,OAAQ,SAGFC,EAAY,CACvBX,EAAG,CACDY,EAAG,UACHC,GAAI,WAENZ,EAAG,CACDW,EAAG,UACHC,GAAI,WAENX,EAAG,CACDU,EAAG,UACHE,EAAG,UACHD,GAAI,QAENV,EAAG,CACDS,EAAG,OACHG,EAAG,OACHC,GAAI,OACJH,GAAI,QAENT,EAAG,CACDQ,EAAG,OACHG,EAAG,OACHC,GAAI,OACJH,GAAI,QAENR,EAAG,CACDO,EAAG,OACHG,EAAG,OACHC,GAAI,OACJH,GAAI,QAENI,GAAI,CACFL,EAAG,OACHC,GAAI,SAsCR,IAAMK,EAAW,GAUjB,IAAMC,EAAe,WACnB,IAAIC,EAASC,SAASC,cAAc,UACpCF,EAAOG,MAAQH,EAAOI,OAAS,EAC/B,IAAIC,EAAML,EAAOM,WAAW,MAE5B,OAdF,SAAiBC,EAASF,GACxB,OAAO,SAASpD,GAId,OAHMA,KAAO6C,IACXA,EAAW7C,GAAOsD,EAAQC,KAAKH,EAAKpD,IAE/B6C,EAAW7C,IASbwD,EAAQ,SAASC,GACpBL,EAAIM,UAAU,EAAG,EAAG,EAAG,GACvBN,EAAIO,UAAY,OAChBP,EAAIO,UAAYF,EAChB,IAAIG,EAAWR,EAAIO,UAGnB,OAFAP,EAAIO,UAAY,OAChBP,EAAIO,UAAYF,EACZG,IAAaR,EAAIO,UACV,MAEXP,EAAIS,SAAS,EAAG,EAAG,EAAG,GACf,YAAKT,EAAIU,aAAa,EAAG,EAAG,EAAG,GAAGC,UAhB1B,GAoBrB,SAASC,EAAWC,EAAMC,EAAOC,GAC/B,OAAIF,EAAOC,GACDA,EAAMD,GAAQE,EAAUF,EAEzBA,GAAQA,EAAKC,GAASC,EAK1B,SAASC,EAAmBC,GAMjC,IALA,IAAMC,EAAoB/D,OAAOgE,KAAKF,GAAiB5D,KAAI,SAAA0B,GAAC,OAAEqC,SAASrC,MACtEsC,MAAK,SAAC9C,EAAEC,GAAQ,OAAQD,EAAIC,GAAK,EAAKD,IAAMC,EAAI,EAAI,KACjD8C,EAAS,EACTC,EAAS,EACPC,EAAa,GACZD,EAASL,EAAkB5E,QAAQ,CAKxC,IAJA,IAAImF,EAAWP,EAAkBI,GAC7BI,EAAWR,EAAkBK,GAC3BI,EAAejC,EAAYuB,EAAgBQ,IAC3CG,EAAalC,EAAYuB,EAAgBS,IACtC3C,EAAE0C,EAAU1C,GAAG2C,EAAU3C,IAAK,CAGrC,IAFA,IAAMgC,GAAWhC,EAAE0C,IAAWC,EAASD,GACjCI,EAAa,GACV7C,EAAE,EAAGA,EAAE,EAAGA,IACjB6C,EAAW7C,GAAK8C,KAAKC,MAAMnB,EAAWe,EAAa3C,GAAI4C,EAAW5C,GAAI+B,IAExE,IAAMtC,EAAI,IAAIuD,OACZH,EAAW,GAAGI,SAAS,IAAIC,SAAS,EAAG,KACvCL,EAAW,GAAGI,SAAS,IAAIC,SAAS,EAAG,KACvCL,EAAW,GAAGI,SAAS,IAAIC,SAAS,EAAG,MAEzCV,EAAWzC,GAAKN,EAElB6C,IACAC,IAEF,OAAOC,EC7DMW,MAzFf,SAASA,EAAT,GAKI,IAJFC,EAIC,EAJDA,eACAC,EAGC,EAHDA,SACAC,EAEC,EAFDA,MACAC,EACC,EADDA,YAEQtE,EAAWG,IAAXH,OADP,EAE2BuE,oBAAS,GAFpC,mBAEO/F,EAFP,KAEcgG,EAFd,OAG+CD,mBAAS,MAHxD,mBAGME,EAHN,KAGwBC,EAHxB,OAI+CH,mBAAS,MAJxD,mBAIMI,EAJN,KAIwBC,EAJxB,KAKKC,EAAgB,EAAhBA,EAA2B,EAA3BA,EAAmC,EACnCC,EAAYC,iBAAOF,GAEzBG,qBAAU,YACgB,IAApBb,GAAyB3F,IAE3BkG,GAAqB,GACrBE,GAAqB,GACrBJ,GAAS,IAE8C,mBAArDtF,OAAO+F,UAAUjB,SAAS9B,KAAMiC,IAAyCW,EAAUI,UAAYL,IAEjGC,EAAUI,QAAUL,EACpBL,GAAS,GACLL,EAAe9F,OAAS,IAC1BqG,EAAoBP,EAAe,IAC/BA,EAAe9F,OAAS,GAC1BuG,EAAoBT,EAAe,KAEvCW,EAAUI,QAAUL,KAErB,CAACV,IACJ,IAAMgB,EAAOJ,iBAAO,CAAC,IACfK,EAAKL,iBAAO,IACZM,EAAKN,iBAAO,IAClB,SAASO,IAELH,EAAKD,QADH1G,EACa,CAAC,GAAGuF,OAAOqB,EAAGF,QAASG,EAAGH,SAE1B,CAAC,GAGuC,mBAArDhG,OAAO+F,UAAUjB,SAAS9B,KAAMiC,IAAyCW,EAAUI,UAAYL,GACnGT,EAASe,EAAKD,SAEhBF,qBAAU,WACRM,MACC,CAAC9G,EAAO4G,EAAIC,EAAIjB,IAUnB,IAAMmB,EAAW,CAAC,OAAQjB,GACZ,IAAVD,GAAakB,EAAWC,KAAK,QAEjC,IAAMC,EDVD,SAAkBzF,EAAQqE,GAC/B,OAAQrE,EAAOzC,EAASE,eACtB,KAAKG,EACH,OAAOoC,EAAOzC,EAASI,eACzB,KAAKC,EACH,IAAM8H,EAAiB1F,EAAOzC,EAASG,cACvC,GAAIgI,GAAkBxG,OAAOgE,KAAK7C,GAAUsF,SAASD,GAAiB,CACpE,IAAME,EAAavF,EAASqF,GAE5B,OAAOE,EADQvB,EAAQuB,EAAWvH,QAIlC,OADAwH,QAAQC,IAAR,6CAAkDJ,EAAlD,MACO,KAGX,KAAK9H,EACH,IAAMmI,EAAkB/F,EAAOzC,EAASG,cACxC,GAAIqI,GAAmB7G,OAAOgE,KAAKjC,GAAW0E,SAASI,GAAkB,CACvE,IACMxC,EAAaR,EADC9B,EAAU8E,IAE9B,OAAI7G,OAAOgE,KAAKK,GAAYnE,KAAI,SAAA0B,GAAC,OAAEqC,SAASrC,MAAI6E,SAAStB,GAAed,EAAWc,GAC5ErE,EAAOzC,EAASI,eAGvB,OADAkI,QAAQC,IAAR,gDAAqDC,EAArD,MACO,KAGX,QACE,OAAO,MClBAC,CAAShG,EAAQqE,GAE5B,OAAS7F,EAOP,sBAAKyH,UAAWV,EAAWjG,KAAK,KAC9B4G,aAAY7B,EACZ8B,MAAOV,EAAK,CAACW,gBAAiBX,GAAM,KAFtC,UAII,cAACvB,EAAD,CACEG,MAAOA,EAAM,EACbC,YAA6B,MAAhBA,EAAsB,IAAM,IACzCF,SA5BR,SAAkBiC,GAChBjB,EAAGF,QAAUmB,EACbf,KA2BMnB,eAAgBM,IAElB,cAACP,EAAD,CACEG,MAAOA,EAAM,EACbC,YAA6B,MAAhBA,EAAsB,IAAM,IACzCF,SA9BR,SAAkBiC,GAChBhB,EAAGH,QAAUmB,EACbf,KA6BMnB,eAAgBQ,OApBtB,qBAAKsB,UAAWV,EAAWjG,KAAK,KAC9BgH,QAAS,kBAAM9B,GAAS,IACxB0B,aAAY7B,EACZ8B,MAAOV,EAAK,CAACW,gBAAiBX,GAAM,QC0B3Bc,MA7Ff,YAA6B,IAmBT5H,EAnBH6H,EAAW,EAAXA,SAAW,EACGrG,IAArBH,EADkB,EAClBA,OAAQC,EADU,EACVA,SAChB,SAASwG,EAAeC,EAAEC,GAKxB,OAHA1G,EAASV,EAAamH,EAAEC,IACxB7H,EAAU4H,EAAGC,GAEND,GACL,KAAKnJ,EAASI,cACZgE,SAASiF,gBAAgBT,MAAMU,YAAY,kBAAmBF,GAC9D,MACF,KAAKpJ,EAASE,aACd,KAAKF,EAASG,aACd,KAAKH,EAASuJ,cACZ,MACF,QACEjB,QAAQC,IAAR,iCAAsCY,EAAtC,OAON,OACE,gCACE,+CACA,sBAAKK,GAAG,WAAR,UACE,sBAAKd,UAAU,UAAf,UACE,kDACA,qBAAKc,GAAG,uBAAR,SACG7H,OAAOC,QAAQ,CACd,iCAAkCvB,EAClC,kBAAmBA,EACnB,SAAYA,IACXwB,KAAI,mCAAE4H,EAAF,KAASrI,EAAT,YACL,gCACE,uBAAOa,KAAK,QAAQyH,KAAK,eAAerI,MAAOD,EAAKoI,GAAE,uBAAkBpI,GACtEuI,QAASlH,EAAOzC,EAASE,gBAAkBkB,EAC3CwI,SAAU,SAACzG,GAAD,OAAO+F,EAAelJ,EAASE,aAAciD,EAAE0G,OAAOxI,UAElE,uBAAOyI,QAAO,uBAAkB1I,GAAhC,SAAwCqI,IACrCpJ,IAAwBe,GAAOqB,EAAOzC,EAASE,gBAAkBkB,EAChE,sBAAKoI,GAAG,kBAAR,UACE,sBAAMd,UAAU,OAAhB,8DACC/G,OAAOC,QAAQkB,GAAUjB,KAAI,mCAAEkI,EAAF,KAAgBC,EAAhB,YAC5B,gCACE,uBAAO/H,KAAK,QAAQyH,KAAK,UAAUrI,MAAO0I,EAAcP,GAAE,wBAAmBO,GAC3EJ,QAASlH,EAAOzC,EAASG,gBAAkB4J,EAC3CH,SAAU,SAACzG,GAAD,OAAO+F,EAAelJ,EAASG,aAAcgD,EAAE0G,OAAOxI,UAElE,uBAAOyI,QAAO,wBAAmBC,GAAjC,SACGC,EAAenI,KAAI,SAAAoB,GAAC,OACnB,qBAAKyF,UAAU,cAAcE,MAAO,CAACC,gBAAiB5F,IAAtD,wBAAgF8G,EAAhF,YAAgG9G,EAAEgH,QAAQ,eAAgB,aAPhI,wBAA2BF,UAa/B,KACD1J,IAA2Be,GAAOqB,EAAOzC,EAASE,gBAAkBkB,EACnE,sBAAKoI,GAAG,mBAAR,UACE,sBAAMd,UAAU,OAAhB,mEACC/G,OAAOC,QAAQ8B,GAAW7B,KAAI,mCAAEqI,EAAF,KAAiBzE,EAAjB,YAC7B,gCACE,uBAAOxD,KAAK,QAAQyH,KAAK,UAAUrI,MAAO6I,EAAeV,GAAE,2BAAsBU,GAC/EP,QAASlH,EAAOzC,EAASG,gBAAkB+J,EAC3CN,SAAU,SAACzG,GAAD,OAAO+F,EAAelJ,EAASG,aAAcgD,EAAE0G,OAAOxI,UAElE,uBAAOyI,QAAO,2BAAsBI,GAApC,SACGvI,OAAOC,QAAQ4D,EAAmBC,IAAkB5D,KAAI,mCAAEqB,EAAF,KAAID,EAAJ,YACvD,qBAAKyF,UAAU,uBAAuBE,MAAO,CAACC,gBAAiB5F,IAA/D,2BAA4FiH,EAA5F,YAA6GhH,EAA7G,YAAkHD,EAAEgH,QAAQ,eAAgB,aAPlJ,2BAA8BC,UAalC,OAzCN,uBAA0B9I,YA8ChC,sBAAKsH,UAAU,UAAf,UACE,uBAAOoB,QAAQ,gBAAf,4BACA,uBAAON,GAAG,gBAAgBvH,KAAK,OAAOZ,OAhE5BD,EAgE4CpB,EAASI,cA/DjEuB,OAAOgE,KAAKlD,GAAQ2F,SAAShH,GAAaqB,EAAOrB,GAC9C,IA8D8EwI,SAAU,SAACzG,GAAD,OAAO+F,EAAelJ,EAASI,cAAe+C,EAAE0G,OAAOxI,UAChJ,qBAAKmI,GAAG,uBAAuBd,UAAU,gBACzC,uBAAK,sBAAMA,UAAU,OAAhB,uFAEP,wBAAQK,QAASE,EAAjB,kCCxCD,SAASkB,EAAerB,EAAWhC,GACxC,GAAyB,IAArBgC,EAAUhI,OAAc,MAAO,CAAC,CAAC,EAAE,GAAI,IAI3C,IAFA,IAAMsJ,EAAa,GACfC,EAAY,EACTA,EAAY,GAAKvB,EAAUhI,OAAS,GAAG,CAE5C,IAAMwJ,EAAUxB,EAAUyB,QAG1B,GADAF,IACIC,EAAS,CACX,IAAIE,EADO,EAEcL,EAAerB,EAAWhC,EAAM,GAF9C,mBAEV0D,EAFU,KAEC1B,EAFD,KAIXsB,EAAWnC,KAAKuC,QAEhBJ,EAAWnC,KAAKqC,GAIpB,MAAO,CAACF,EAAYtB,GCyBP2B,MAxFf,WAAgB,IAAD,EACgC7H,IAArCH,EADK,EACLA,OAAkBiI,EADb,EACGhI,SACViI,EACG,EADHA,EAEC,EAFDA,EAGG,EALI,EAOyB3D,mBAAS2D,GAPlC,mBAONC,EAPM,KAOOC,EAPP,OAQmC7D,mBAAS,MAR5C,mBAQN8D,EARM,KAQYC,EARZ,KAyCb,SAAS9B,IACP4B,EAAeF,GAUjB,OA3CAlD,qBAAU,WACR,IAAM1G,EAASL,IAEfiB,OAAOC,QAAQb,GAAQG,SAAS,YAAkB,IAAD,mBAAfE,EAAe,KAAXC,EAAW,KAC3CM,OAAOqJ,OAAOhL,GAAUoI,SAAShH,IACnCsJ,EAAe1I,EAAaZ,EAAKC,OAIjCN,EAAOf,EAASC,cAAgBwC,EAAOzC,EAASC,eAAiBc,EAAOf,EAASC,eACnFwC,EAAOzC,EAASC,aAAec,EAAOf,EAASC,gBAEjD,CAACU,OAAOC,SAASC,OACnB4G,qBAAU,WACR,IADc,EAGO0C,EDNlB,SAA0Bc,GAK/B,IAHA,IAAIC,EAAaC,KAAKF,GAElBG,EAAS,GACNF,EAAWpK,OAAS,GAAG,CAE5B,IAAMuK,EAAOH,EAAWlK,UAAU,EAAE,GACpCkK,EAAaA,EAAWI,MAAM,GAI9B,IAFA,IAAMC,EAAUF,EAAKG,WAAW,GAEvBjI,EAAE,EAAGA,GAAG,EAAGA,IAAK,CACvB,IAAMkI,GAAOF,EAAO,SAAI,EAAGhI,IAAM,EAAI,EAAI,EACzC6H,EAASnD,KAAKwD,IAKlB,KAAuC,IAAhCL,EAASA,EAAStK,OAAO,IAAUsK,EAASM,MAEnD,OAAON,ECjBaO,CAAiBlJ,EAAOzC,EAASC,cAEJ,GAAxCmK,EAHO,oBAKVA,EAAWtJ,SACbwH,QAAQC,IAAI,mBACZU,IACA8B,EAAoBX,EAAW,IAC/B9B,QAAQC,IAAI,8BAA8B5H,OAAOiL,YAAYC,WAE9D,CAACpJ,EAAOzC,EAASC,eAoBlB,qBAAKyI,UAAU,MAAf,SACGkC,IAAgBD,EACf,sBAAKnB,GAAG,YAAR,UACE,yCACA,wBAAQT,QAASE,EAAjB,qBACA,yBAAQF,QApBhB,WACE8B,EAAeF,IAmBT,sBACW,uBADX,8BAIA,mBAAGd,OAAO,SAASiC,IAAI,aAAapD,UAAU,SAASqD,KAAK,0DAA5D,sBAGF,gCACE,sBAAKrD,UAAU,gBAAf,UACE,wBAAQc,GAAG,WAAWT,QAhChC,WACE8B,EAAeF,IA+BP,kBACA,wBAAQ5B,QApBlB,WACEgC,GAAqB,GACrBiB,YAAW,kBAAMjB,EAAoB,QAAO,KAkBpC,sBAEDH,IAAgBD,EACf,cAAC,EAAD,CACE1B,SAAUA,IAGZ,cAAC,EAAD,CACEnC,MAAO,EACPC,YAAa,IACbF,SAlCZ,SAA0BiC,GACxB,IAAMmC,EDlDH,SAA0BG,GAI/B,IADA,IAAIF,EAAa,GACVE,EAAStK,OAAS,GAAG,CAM1B,IAJA,IAAMmL,EAAYb,EAASc,OAAO,EAAG,GAGjCb,EAAK,EACA9H,EAAE,EAAGA,EAAE,GAAKA,EAAE0I,EAAUnL,OAAQyC,IAAK,CAE5C8H,GADUY,EAAU1I,GAAV,SAAe,EAAI,EAAEA,GAIjC2H,GAAciB,OAAOC,aAAaf,GAMpC,OAFegB,KAAKnB,GC+BHoB,CAAiBxD,GAChCvH,EAAUvB,EAASC,YAAagL,IAiCtBrE,eAAgBkE,UC1EfyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC7K,EAAD,UACE,cAAC,EAAD,QAGJ+B,SAAS+I,eAAe,SAM1BZ,M","file":"static/js/main.bbf8a782.chunk.js","sourcesContent":["import { createContext, useReducer, useContext } from 'react';\n\nexport const SETTINGS = {\n  SCULPT_PATH: 's',\n  PALETTE_TYPE: 'pt',\n  PALETTE_NAME: 'p',\n  DEFAULT_COLOR: 'd'\n};\n\nexport const PALETTE_TYPES = {\n  GRADIENT: 'g',\n  CYCLE: 'c',\n  MONOCHROME: 'm'\n};\n\n// Initial state\nconst initialState = {\n  [SETTINGS.PALETTE_TYPE]: PALETTE_TYPES.GRADIENT,\n  [SETTINGS.PALETTE_NAME]: 'gs',\n  [SETTINGS.DEFAULT_COLOR]: '#ddd'\n};\n\nexport const ConfigContext = createContext();\n\nexport const ACTIONS = {\n  UPDATE:1\n};\n\nexport function parseUrl() {\n  if (window.location.hash.length === 0) return {};\n  const params={};\n  window.location.hash.substring(1).split('&').forEach(pair => {\n    const [key, value] = pair.split('=');\n    if (value.length)\n      params[key] = decodeURIComponent(value);\n  });\n  return params;\n}\n\nexport function updateUrl(setting_key, raw_value) {\n  const params = parseUrl();\n  params[setting_key] = raw_value;\n  const newHash = Object.entries(params).map(\n    ([key,value]) => `${key}=${encodeURIComponent(value)}`\n  ).join('&');\n  window.location.hash = newHash;\n}\n\n// Action creators\nexport function updateConfig(key, value) {\n  return { type: ACTIONS.UPDATE, key, value };\n}\n\n// Reducer\nexport const configReducer = (state, action) => {\n  switch (action.type) {\n    case ACTIONS.UPDATE:\n      return { ...state, [action.key]: action.value };\n    default:\n      return state;\n  }\n}\n\nfunction ConfigProvider(props) {\n  const [config, dispatch] = useReducer(configReducer, initialState);\n  const configData = { config, dispatch };\n  return <ConfigContext.Provider value={configData} {...props} />;\n}\n\nfunction useConfigContext() {\n  return useContext(ConfigContext);\n}\n\nexport { ConfigProvider, useConfigContext };\n","import { SETTINGS, PALETTE_TYPES } from '../contexts/ConfigContext';\n\nexport const PALETTES = {\n  a: ['#b2b2b2', '#50394c', '#f4e1d2', '#ffef96'],\n  b: ['#80ced6', '#d5f4e6', '#fefbd8', '#618685'],\n  c: ['#034f84', '#92a8d1', '#f7cac9', '#f7786b'],\n  d: ['#4040a1', '#36486b', '#618685', '#fefbd8'],\n  e: ['#6b5b95', '#878f99', '#a2b9bc', '#b2ad7f'],\n  f: ['#622569', '#b8a9c9', '#d6d4e0', '#5b9aa0'],\n  g: ['#c83349', '#e06377', '#eeac99', '#f9d5e5'],\n  h: ['#ff7b25', '#d64161', '#6b5b95', '#feb236'],\n  i: ['#d96459', '#f2ae72', '#588c7e', '#f2e394'],\n  j: ['#b2ad7f', '#878f99', '#a2b9bc', '#6b5b95'],\n  bw: ['#fff', '#000']\n};\n\nexport const GRADIENTS = {\n  a: {\n    0: '#fefbd8',\n    15: '#4040a1'\n  },\n  b: {\n    0: '#f9d5e5',\n    15: '#c83349'\n  },\n  c: {\n    0: '#80ced6',\n    6: '#622569',\n    15: '#000'\n  },\n  d: {\n    0: '#f00',\n    5: '#0f0',\n    10: '#00f',\n    15: '#f00'\n  },\n  e: {\n    0: '#0f0',\n    5: '#00f',\n    10: '#f00',\n    15: '#0f0'\n  },\n  f: {\n    0: '#00f',\n    5: '#f00',\n    10: '#0f0',\n    15: '#00f'\n  },\n  gs: {\n    0: '#fff',\n    15: '#000'\n  }\n}\n\nexport function getColor(config, depth) {\n  switch (config[SETTINGS.PALETTE_TYPE]) {\n    case PALETTE_TYPES.MONOCHROME:\n      return config[SETTINGS.DEFAULT_COLOR];\n    case PALETTE_TYPES.CYCLE:\n      const curPaletteName = config[SETTINGS.PALETTE_NAME];\n      if (curPaletteName && Object.keys(PALETTES).includes(curPaletteName)) {\n        const curPalette = PALETTES[curPaletteName];\n        const palIdx = depth % curPalette.length;\n        return curPalette[palIdx];\n      } else {\n        console.log(`ERROR: Unknown Cycle Palette name '${curPaletteName}'`)\n        return null;\n      }\n      // eslint-disable-next-line no-fallthrough\n    case PALETTE_TYPES.GRADIENT:\n      const gradPaletteName = config[SETTINGS.PALETTE_NAME];\n      if (gradPaletteName && Object.keys(GRADIENTS).includes(gradPaletteName)) {\n        const curGradient = GRADIENTS[gradPaletteName];\n        const gradColors = getGradientEntries(curGradient);\n        if (Object.keys(gradColors).map(i=>parseInt(i)).includes(depth)) return gradColors[depth];\n        return config[SETTINGS.DEFAULT_COLOR];\n      } else {\n        console.log(`ERROR: Unknown Gradient Palette name '${gradPaletteName}'`)\n        return null;\n      }\n      // eslint-disable-next-line no-fallthrough\n    default:\n      return null;\n  }\n}\n\n\n// Thanks, Alnitak! https://stackoverflow.com/questions/11068240/what-is-the-most-efficient-way-to-parse-a-css-color-in-javascript\nconst memo_cache={};\nfunction memoize(factory, ctx) {\n  return function(key) {\n    if (!(key in memo_cache)) {\n      memo_cache[key] = factory.call(ctx, key);\n    }\n    return memo_cache[key];\n  };\n};\n\nconst colorToRGBA = (function() {\n  var canvas = document.createElement('canvas');\n  canvas.width = canvas.height = 1;\n  var ctx = canvas.getContext('2d');\n\n  return memoize(function(col) {\n      ctx.clearRect(0, 0, 1, 1);\n      ctx.fillStyle = '#000';\n      ctx.fillStyle = col;\n      var computed = ctx.fillStyle;\n      ctx.fillStyle = '#fff';\n      ctx.fillStyle = col;\n      if (computed !== ctx.fillStyle) {\n          return null; // invalid color\n      }\n      ctx.fillRect(0, 0, 1, 1);\n      return [ ...ctx.getImageData(0, 0, 1, 1).data ];\n  });\n})();\n\nfunction getBetween(init, final, percent) {\n  if (init < final) {\n    return (final-init) * percent + init;\n  } else {\n    return init - (init-final) * percent;\n  }\n}\n\n//TODO: memoize\nexport function getGradientEntries(gradient_points) {\n  const sortedDepthPoints = Object.keys(gradient_points).map(i=>parseInt(i))\n  .sort((a,b) => { return (a < b ? -1 : (a === b ? 0 : 1))});\n  let minIdx = 0;\n  let maxIdx = 1;\n  const gradColors = {};\n  while (maxIdx < sortedDepthPoints.length) {\n    let minDepth = sortedDepthPoints[minIdx];\n    let maxDepth = sortedDepthPoints[maxIdx];\n    const initialColor = colorToRGBA(gradient_points[minDepth]);\n    const finalColor = colorToRGBA(gradient_points[maxDepth]);\n    for (let i=minDepth; i<=maxDepth; i++) {\n      const percent = (i-minDepth)/(maxDepth-minDepth);\n      const colorPoint = [];\n      for (let j=0; j<3; j++) {\n        colorPoint[j] = Math.round(getBetween(initialColor[j], finalColor[j], percent));\n      }\n      const c = '#'.concat(\n        colorPoint[0].toString(16).padStart(2, '0'),\n        colorPoint[1].toString(16).padStart(2, '0'),\n        colorPoint[2].toString(16).padStart(2, '0')\n      );\n      gradColors[i] = c;\n    }\n    minIdx++;\n    maxIdx++;\n  }\n  return gradColors;\n}","import { useState, useEffect, useRef } from 'react';\nimport { useConfigContext } from '../contexts/ConfigContext';\nimport { getColor } from '../lib/paletteTools';\n\nfunction BinaryTreeArtPixel({\n  loadSculptPath,\n  onUpdate,\n  depth,\n  orientation\n}) {\n  const { config } = useConfigContext();\n  const [ split, setSplit ] = useState(false);\n  const [c1LoadSculptPath, setC1LoadSculptPath] = useState(null);\n  const [c2LoadSculptPath, setC2LoadSculptPath] = useState(null);\n  const LOADSTATE = {NA:0, LOADING:1, DONE:2};\n  const loadState = useRef(LOADSTATE.NA);\n\n  useEffect(() => {\n    if (loadSculptPath === -1 && split) {\n      // propagate reset action\n      setC1LoadSculptPath(-1);\n      setC2LoadSculptPath(-1);\n      setSplit(false);\n    }\n    if (Object.prototype.toString.call( loadSculptPath ) === '[object Array]' && loadState.current === LOADSTATE.NA) {\n      // propagate load action\n      loadState.current = LOADSTATE.LOADING;\n      setSplit(true);\n      if (loadSculptPath.length > 0) {\n        setC1LoadSculptPath(loadSculptPath[0]);\n        if (loadSculptPath.length > 1)\n          setC2LoadSculptPath(loadSculptPath[1]);\n      }\n      loadState.current = LOADSTATE.DONE;\n    }\n  }, [loadSculptPath]);\n  const dfsp = useRef([0]);\n  const c1 = useRef([]);\n  const c2 = useRef([]);\n  function updateDfsp() {\n    if (split) {\n      dfsp.current = [1].concat(c1.current, c2.current);\n    } else {\n      dfsp.current = [0];\n    }\n    // if loading, don't propagate upwards\n    if (Object.prototype.toString.call( loadSculptPath ) === '[object Array]' && loadState.current === LOADSTATE.LOADING) return;\n    onUpdate(dfsp.current);\n  }\n  useEffect(() => {\n    updateDfsp();\n  }, [split, c1, c2, onUpdate]);\n  function updateC1(bitstream) {\n    c1.current = bitstream;\n    updateDfsp();\n  }\n  function updateC2(bitstream) {\n    c2.current = bitstream;\n    updateDfsp();\n  }\n\n  const classNames=['btap', orientation];\n  if (depth === 0) classNames.push('base');\n\n  const bg = getColor(config, depth);\n\n  return (!split ?\n    <div className={classNames.join(' ')}\n      onClick={() => setSplit(true)}\n      data-depth={depth}\n      style={bg ? {backgroundColor: bg} : null}\n    />\n  :\n    <div className={classNames.join(' ')}\n      data-depth={depth}\n      style={bg ? {backgroundColor: bg} : null}\n    >\n        <BinaryTreeArtPixel\n          depth={depth+1}\n          orientation={orientation === 'h' ? 'v' : 'h'}\n          onUpdate={updateC1}\n          loadSculptPath={c1LoadSculptPath}\n        />\n        <BinaryTreeArtPixel\n          depth={depth+1}\n          orientation={orientation === 'h' ? 'v' : 'h'}\n          onUpdate={updateC2}\n          loadSculptPath={c2LoadSculptPath}\n        />\n    </div>\n  );\n}\n\nexport default BinaryTreeArtPixel;\n","import { useConfigContext, updateConfig, SETTINGS, updateUrl, PALETTE_TYPES } from '../contexts/ConfigContext';\nimport { PALETTES, GRADIENTS, getGradientEntries } from '../lib/paletteTools';\n\nfunction Config({doSculpt}) {\n  const { config, dispatch } = useConfigContext();\n  function myUpdateConfig(k,v) {\n    // store value in context\n    dispatch(updateConfig(k,v));\n    updateUrl(k, v);\n    // update CSS\n    switch(k) {\n      case SETTINGS.DEFAULT_COLOR:\n        document.documentElement.style.setProperty('--default-color', v);\n        break;\n      case SETTINGS.PALETTE_TYPE:\n      case SETTINGS.PALETTE_NAME:\n      case SETTINGS.GRADIENT_NAME:\n        break;\n      default:\n        console.log(`Unknown settings key: '${k}'`);\n    }\n  }\n  function getValue(key) {\n    if (Object.keys(config).includes(key)) return config[key];\n    return '';\n  }\n  return (\n    <div>\n      <h1>Make it yours</h1>\n      <div id='settings'>\n        <div className='setting'>\n          <label>Palette type:</label>\n          <div id='palette-type-options'>\n            {Object.entries({\n              'Monochrome (use default color)': PALETTE_TYPES.MONOCHROME,\n              'Repeating cycle': PALETTE_TYPES.CYCLE,\n              'Gradient': PALETTE_TYPES.GRADIENT\n            }).map(([label, key]) =>\n              <div key={`palette_type_${key}`}>\n                <input type='radio' name='palette_type' value={key} id={`palette_type_${key}`}\n                  checked={config[SETTINGS.PALETTE_TYPE] === key}\n                  onChange={(e) => myUpdateConfig(SETTINGS.PALETTE_TYPE, e.target.value)}\n                />\n                <label htmlFor={`palette_type_${key}`}>{label}</label>\n                  {PALETTE_TYPES.CYCLE === key && config[SETTINGS.PALETTE_TYPE] === key ?\n                    <div id='palette-options'>\n                      <span className='help'>Palette colors will cycle and repeat with depth.</span>\n                      {Object.entries(PALETTES).map(([palette_name, palette_colors]) => (\n                        <div key={`palette_cycle_${palette_name}`}>\n                          <input type='radio' name='palette' value={palette_name} id={`palette_cycle_${palette_name}`}\n                            checked={config[SETTINGS.PALETTE_NAME] === palette_name}\n                            onChange={(e) => myUpdateConfig(SETTINGS.PALETTE_NAME, e.target.value)}\n                          />\n                          <label htmlFor={`palette_cycle_${palette_name}`}>\n                            {palette_colors.map(c => (\n                              <div className='colorsample' style={{backgroundColor: c}} key={`palette_cycle_${palette_name}_${c.replace(/[^0-9a-zA-Z]/, '')}`}/>\n                            ))}\n                          </label>\n                        </div>\n                      ))}\n                    </div>                      \n                  : null}\n                  {PALETTE_TYPES.GRADIENT === key && config[SETTINGS.PALETTE_TYPE] === key ?\n                    <div id='gradient-options'>\n                      <span className='help'>Palette colors transition between two or more colors.</span>\n                      {Object.entries(GRADIENTS).map(([gradient_name, gradient_points]) => (\n                        <div key={`palette_gradient_${gradient_name}`}>\n                          <input type='radio' name='palette' value={gradient_name} id={`palette_gradient_${gradient_name}`}\n                            checked={config[SETTINGS.PALETTE_NAME] === gradient_name}\n                            onChange={(e) => myUpdateConfig(SETTINGS.PALETTE_NAME, e.target.value)}\n                          />\n                          <label htmlFor={`palette_gradient_${gradient_name}`}>\n                            {Object.entries(getGradientEntries(gradient_points)).map(([d,c]) => (\n                              <div className='colorsample gradient' style={{backgroundColor: c}} key={`palette_gradient_${gradient_name}_${d}_${c.replace(/[^0-9a-zA-Z]/, '')}`}/>\n                            ))}\n                          </label>\n                        </div>\n                      ))}\n                    </div>\n                  : null}\n              </div>\n            )}\n          </div>\n        </div>\n        <div className='setting'>\n          <label htmlFor='default-color'>Default color:</label>\n          <input id='default-color' type='text' value={getValue(SETTINGS.DEFAULT_COLOR)} onChange={(e) => myUpdateConfig(SETTINGS.DEFAULT_COLOR, e.target.value)}/>\n          <div id='default-color-sample' className='colorsample'/>\n          <br/><span className='help'>Can be any valid HTML color name, or a code in #rgb or #rrggbb format.</span>\n        </div>\n        <button onClick={doSculpt}>{`Let's Sculpt!`}</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Config;\n","const DEBUG_BINARYTOOLS = false;\n\nexport function bitArrayToBase64(bitArray) {\n  if (DEBUG_BINARYTOOLS) console.log(\"bitArrayToBase64, got bitArray=\",bitArray);\n  // convert bitstream to binary data\n  let binaryData = '';\n  while (bitArray.length > 0) {\n    // get the next 8 bits\n    const eightbits = bitArray.splice(0, 8);\n    if (DEBUG_BINARYTOOLS) console.log(\"spliced: \",eightbits);\n    // convert these 8 bits to a byte\n    let byte=0;\n    for (let i=0; i<8 && i<eightbits.length; i++) {\n      const n = eightbits[i] * 2**(7-i);\n      byte += n;\n      if (DEBUG_BINARYTOOLS) console.log(`Adding ${eightbits[i]} * (2**(7-${i})=${2**(7-i)}) }=${n} to byte, now=${byte}`);\n    }\n    binaryData += String.fromCharCode(byte);\n    if (DEBUG_BINARYTOOLS) console.log(`Appending byte ${byte} to binaryData,  now='${binaryData}'`);\n  }\n  // convert binary data to base64 string\n  const base64 = btoa(binaryData);\n  if (DEBUG_BINARYTOOLS) console.log(`returning base64='${base64}'`);\n  return base64;\n}\n\nexport function base64toBitArray(base64) {\n  if (DEBUG_BINARYTOOLS) console.log(`base64toBitArray, got base64='${base64}'`);\n  let binaryData = atob(base64);\n  if (DEBUG_BINARYTOOLS) console.log(`binaryData='${binaryData}'`);\n  let bitArray=[];\n  while (binaryData.length > 0) {\n    // Shift off the next byte of the string\n    const byte = binaryData.substring(0,1);\n    binaryData = binaryData.slice(1);\n    if (DEBUG_BINARYTOOLS) console.log(`Looking at next byte='${byte}'`)\n    const byteInt = byte.charCodeAt(0);\n    if (DEBUG_BINARYTOOLS) console.log(`next byte numerical value is ${byteInt}`);\n    for (let i=7; i>=0; i--) {\n      const bit = (byteInt & (2**i)) > 0 ? 1 : 0;\n      bitArray.push(bit);\n      if (DEBUG_BINARYTOOLS) console.log(`Adding ${bit} to the bitArray`);\n    }\n  }\n  // trim 0s from the trailing end\n  while (bitArray[bitArray.length-1] === 0) bitArray.pop();\n  if (DEBUG_BINARYTOOLS) console.log(\"Returning bitArray=\",bitArray);\n  return bitArray;\n}\n\nexport function parseBitStream(bitstream, depth) {\n  if (bitstream.length === 0) return [[0,0], []];\n  if (DEBUG_BINARYTOOLS) console.log(\"\\t\".repeat(depth)+\"parseBitStream:\",bitstream)\n  const sculptPath = [];\n  let cellCount = 0;\n  while (cellCount < 2 && bitstream.length > 0) {\n    // Shift off the first element for myself\n    const thisBit = bitstream.shift();\n    if (DEBUG_BINARYTOOLS) console.log(\"\\t\".repeat(depth)+`parseBitStream: (processing ${thisBit})`);\n    cellCount++;\n    if (thisBit) {\n      let childPath;\n      [childPath, bitstream] = parseBitStream(bitstream, depth+1);\n      if (DEBUG_BINARYTOOLS) console.log(\"\\t\".repeat(depth)+\"parseBitStream: adding child path\",childPath);\n      sculptPath.push(childPath);\n    } else {\n      sculptPath.push(thisBit);\n    }\n  }\n  if (DEBUG_BINARYTOOLS) console.log(\"\\t\".repeat(depth)+\"parseBitStream returning sculptPath:\",sculptPath,\", and remainder=\",bitstream);\n  return [sculptPath, bitstream];\n}\n","import { useState, useEffect } from 'react';\nimport './App.css';\nimport BinaryTreeArtPixel from './components/BinaryTreeArtPixel.js';\nimport { useConfigContext, updateConfig, SETTINGS, parseUrl, updateUrl } from './contexts/ConfigContext';\nimport Config from './components/Config.js';\nimport { bitArrayToBase64, base64toBitArray, parseBitStream } from './lib/binaryTools.js';\n\nfunction App() {\n  const { config, dispatch: configDispatch } = useConfigContext();\n  const VIEWS={\n    CONFIG:3,\n    MENU:2,\n    SCULPT:1\n  };\n  const [currentView, setCurrentView] = useState(VIEWS.CONFIG);\n  const [loadedSculptPath, setLoadedSculptPath] = useState(null);\n  useEffect(() => {\n    const params = parseUrl();\n    // load config\n    Object.entries(params).forEach( ([key,value]) => {\n      if (Object.values(SETTINGS).includes(key)) {\n        configDispatch(updateConfig(key, value));\n      }\n    });\n    // Process sculpt path in URL\n    if (params[SETTINGS.SCULPT_PATH] && config[SETTINGS.SCULPT_PATH] !== params[SETTINGS.SCULPT_PATH]) {\n      config[SETTINGS.SCULPT_PATH] = params[SETTINGS.SCULPT_PATH];\n    }\n  },[window.location.hash]);\n  useEffect(() => {\n    const bitstream = base64toBitArray(config[SETTINGS.SCULPT_PATH]);\n    // replay loaded sculptpath\n    const [sculptPath] = parseBitStream(bitstream, 0);\n    //console.log(\"Parsed bitstream is:\",sculptPath);\n    if (sculptPath.length) {\n      console.log(\"starting replay\");\n      doSculpt();\n      setLoadedSculptPath(sculptPath[0]);\n      console.log(\"window.performance.memory =\",window.performance.memory);\n    }\n  }, [config[SETTINGS.SCULPT_PATH]])\n\n  function doMEnu() {\n    setCurrentView(VIEWS.MENU);\n  }\n  function doConfig() {\n    setCurrentView(VIEWS.CONFIG);\n  }\n  function doSculpt() {\n    setCurrentView(VIEWS.SCULPT);\n  }\n  function updateSculptPath(bitstream) {\n    const base64 = bitArrayToBase64(bitstream);\n    updateUrl(SETTINGS.SCULPT_PATH, base64)\n  }\n  function resetSculpture() {\n    setLoadedSculptPath(-1);\n    setTimeout(() => setLoadedSculptPath(null), 10);\n  }\n  return (\n    <div className=\"App\">\n      {currentView === VIEWS.MENU ?\n        <div id=\"main-menu\">\n          <h1>Le Menu</h1>\n          <button onClick={doSculpt}>Sculpt!</button>\n          <button onClick={doConfig}>\n            Configure<br/>\n            (Set your palette, etc.)\n          </button>\n          <a target=\"_blank\" rel=\"noreferrer\" className='button' href=\"https://github.com/benjaminbradley/pixelsculptor#readme\">About</a>\n        </div>\n      :\n        <div>\n          <div className='canvasButtons'>\n            <button id='goToMenu' onClick={doMEnu}>Menu</button>\n            <button onClick={resetSculpture}>Reset</button>\n          </div>\n          {currentView === VIEWS.CONFIG?\n            <Config\n              doSculpt={doSculpt}\n            />\n          :\n            <BinaryTreeArtPixel\n              depth={0}\n              orientation={'v'}\n              onUpdate={updateSculptPath}\n              loadSculptPath={loadedSculptPath}\n            />\n          }\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ConfigProvider } from './contexts/ConfigContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ConfigProvider>\n      <App />\n    </ConfigProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}